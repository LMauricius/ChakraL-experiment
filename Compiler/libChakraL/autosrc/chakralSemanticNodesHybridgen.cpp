// This file is autogenerated. Edit only function bodies!

#include "../autoinclude/chakralSemanticNodesAutogen.h"
#include <ostream>

namespace ChakraL
{
    
    std::string_view SemanticNode_ContextBlock::className() const {
		return "ContextBlock";
    }
    
    void SemanticNode_ContextBlock::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_DescriptionEntry::className() const {
		return "DescriptionEntry";
    }
    
    void SemanticNode_DescriptionEntry::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_TraitAssertion::className() const {
		return "TraitAssertion";
    }
    
    void SemanticNode_TraitAssertion::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_Identifier::className() const {
		return "Identifier";
    }
    
    void SemanticNode_Identifier::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_ExprHighest::className() const {
		return "ExprHighest";
    }
    
    void SemanticNode_ExprHighest::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_ExprBinaryL2R::className() const {
		return "ExprBinaryL2R";
    }
    
    void SemanticNode_ExprBinaryL2R::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_ExprLUnary::className() const {
		return "ExprLUnary";
    }
    
    void SemanticNode_ExprLUnary::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_ExprRUnary::className() const {
		return "ExprRUnary";
    }
    
    void SemanticNode_ExprRUnary::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_ExprPrefixFunction::className() const {
		return "ExprPrefixFunction";
    }
    
    void SemanticNode_ExprPrefixFunction::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_assignmentCheck::className() const {
		return "assignmentCheck";
    }
    
    void SemanticNode_assignmentCheck::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_RangeLiteral::className() const {
		return "RangeLiteral";
    }
    
    void SemanticNode_RangeLiteral::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_Expression::className() const {
		return "Expression";
    }
    
    void SemanticNode_Expression::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_ValueLiteral::className() const {
		return "ValueLiteral";
    }
    
    void SemanticNode_ValueLiteral::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_ListLiteral::className() const {
		return "ListLiteral";
    }
    
    void SemanticNode_ListLiteral::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_SetLiteral::className() const {
		return "SetLiteral";
    }
    
    void SemanticNode_SetLiteral::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_DictLiteral::className() const {
		return "DictLiteral";
    }
    
    void SemanticNode_DictLiteral::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_DictEntry::className() const {
		return "DictEntry";
    }
    
    void SemanticNode_DictEntry::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_ContextBlockLiteral::className() const {
		return "ContextBlockLiteral";
    }
    
    void SemanticNode_ContextBlockLiteral::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_MemberDecl::className() const {
		return "MemberDecl";
    }
    
    void SemanticNode_MemberDecl::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_FunctionLiteral::className() const {
		return "FunctionLiteral";
    }
    
    void SemanticNode_FunctionLiteral::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_CoroutineLiteral::className() const {
		return "CoroutineLiteral";
    }
    
    void SemanticNode_CoroutineLiteral::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_Definition::className() const {
		return "Definition";
    }
    
    void SemanticNode_Definition::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_IfStat::className() const {
		return "IfStat";
    }
    
    void SemanticNode_IfStat::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_ElseStatPart::className() const {
		return "ElseStatPart";
    }
    
    void SemanticNode_ElseStatPart::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_ElifStatPart::className() const {
		return "ElifStatPart";
    }
    
    void SemanticNode_ElifStatPart::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_LoopStat::className() const {
		return "LoopStat";
    }
    
    void SemanticNode_LoopStat::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_LoopStatPart::className() const {
		return "LoopStatPart";
    }
    
    void SemanticNode_LoopStatPart::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_TimesLoopStatPart::className() const {
		return "TimesLoopStatPart";
    }
    
    void SemanticNode_TimesLoopStatPart::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_ForLoopStatPart::className() const {
		return "ForLoopStatPart";
    }
    
    void SemanticNode_ForLoopStatPart::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_WhileLoopStatPart::className() const {
		return "WhileLoopStatPart";
    }
    
    void SemanticNode_WhileLoopStatPart::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_JumpStat::className() const {
		return "JumpStat";
    }
    
    void SemanticNode_JumpStat::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_BreakStat::className() const {
		return "BreakStat";
    }
    
    void SemanticNode_BreakStat::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_ContinueStat::className() const {
		return "ContinueStat";
    }
    
    void SemanticNode_ContinueStat::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_ReturnStat::className() const {
		return "ReturnStat";
    }
    
    void SemanticNode_ReturnStat::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_YieldStat::className() const {
		return "YieldStat";
    }
    
    void SemanticNode_YieldStat::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_WithStat::className() const {
		return "WithStat";
    }
    
    void SemanticNode_WithStat::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_WithStatEntry::className() const {
		return "WithStatEntry";
    }
    
    void SemanticNode_WithStatEntry::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_AssignmentEqualOperator::className() const {
		return "AssignmentEqualOperator";
    }
    
    void SemanticNode_AssignmentEqualOperator::print(std::ostream& out, size_t tabs) const {
    }
    
    std::string_view SemanticNode_AssignmentEqual::className() const {
		return "AssignmentEqual";
    }
    
    void SemanticNode_AssignmentEqual::print(std::ostream& out, size_t tabs) const {
    }
    
}
