// This file is autogenerated. Do not edit!

#include <list>
#include <string>
#include <map>
#include <memory>
#include "chakralLexer.h"

namespace ChakraL {

    class ParseNode {
    public:
        virtual void process();
        void appendMove(ParseNode& other);
        
        std::map<std::string, std::list<std::unique_ptr<ParseNode>>> nodeLists;
        std::map<std::string, std::list<Token>> tokenLists;
    };

    // State utils
    struct StateData;
    struct State;
    struct ParserBranch;
    struct ParserData;
    
    struct StateData {
        ParseNode* node;
    };
    
    struct State {
        // returns whether the state branches
        bool (*stateHandler)(ParserData& parserData, ParserBranch& branch);
        
        StateData data;
    };
    
    struct ParserBranch {
        std::vector<State> stack;
        ParserBranch* parent;
        size_t branchCount=0;
    };
    
    struct ParserData {
        std::list<ParserBranch> activeBranches;
        std::list<ParserBranch> ambiguousBranches;
    };

}
