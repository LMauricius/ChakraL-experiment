# Newlines and leading whitespace chars are skipped in this file
# Lines starting with a '#' are comments
# Lines starting with a '[' define reusable regex strings (macros). The macro must be enclosed with '[:' and ':]'.
    # The line after is the content of the macro
# Lines starting with '@' define in which lexer state the following rules apply.
    # States are put on a stack and the last state is the current one whose rules apply
# Lines starting with a '?' or '=' start the definition of a rule.
    # Following the '?' and after a single space is the regex defining the rule.
    # Following the '=' and after a single space is the exact string defining the rule. 
    # The rule whose string or regex matches the longest input string applies.
    # The next line should contain only '{'
    # The definition ends with a line containing only '}'
    # Between the braces can be several rule commands:
        # out <Token type name> - adds a token to the list
        # push <State name> - pushes the state to the stack, making it current
        # pop - removes the last state from the stack, making the previous state current
        # swap <State name> - swaps the last state on the stack with the specified one, making the specified one current
        # throw - doesn't move the current character pointer past the matched string; executes the commands and returns the pointer where it was before the rule applied
        # noAutoDetect - important for the parser. Prevents the parser from detecting string token references as this token. Must be put before 'out' command

#[:alpha:]
#A-Za-z

#[:alnum:]
#A-Za-z0-9

#[:digit:]
#0-9

# letter or non-math symbol
[:alphaSpecial:]
\p{L}\p{So}\p{Sc}

# letter or non-math symbol + digits
[:alphaSpecialNum:]
\p{L}\p{So}\p{Sc}0-9

[:operatorSymbol:]
\p{Sm}

[:identifier:]
\p{L}[\p{L}[:digit:]_]*

[:suffix:]
[[:alphaSpecial:]_][[:alphaSpecialNum:]]*

@S_START

    # Get rid of carriage return in case of windows text file on unix
    ? \r
    {
    }


    # Separators

    = ,
    {
        out COMMA
    }
    = ;
    {
        out SEMICOLON
    }
    = :
    {
        out COLON
    }
    = ok
    {
        out BLOCK_END
    }
    = in
    {
        out IN
    }


    # Control flow

    = if
    {
        out IF
    }
    = else
    {
        out ELSE
    }
    = elif
    {
        out ELIF
    }
    = switch
    {
        out SWITCH
    }
    = case
    {
        out CASE
    }
    = times
    {
        out TIMES
    }
    = for
    {
        out FOR
    }
    = while
    {
        out WHILE
    }
    = repeat
    {
        out LOOP_MARK
    }
    = break
    {
        out BREAK
    }
    = continue
    {
        out CONTINUE
    }
    = return
    {
        out RETURN
    }
    = yield
    {
        out YIELD
    }


    # Descriptions

    = with
    {
        out WITH
    }

    = def
    {
        out DEF
    }
    = using
    {
        out USING
    }
    = including
    {
        out INCLUDING
    }
    = ??
    {
        out REQUIREMENT
    }

    = var
    {
        out VAR
    }
    = ref
    {
        out REF
    }
    = api
    {
        out API_MARK
    }


    # Change operators
    
    = =
    {
        out CHANGE
    }
    = <-
    {
        out ASSIGN
    }
    = +=
    {
        out ADD_CHANGE
    }
    = ++
    {
        out INCREMENT
    }
    = --
    {
        out DECREMENT
    }
    = -=
    {
        out SUB_CHANGE
    }
    = *=
    {
        out MUL_CHANGE
    }
    = /=
    {
        out DIV_CHANGE
    }
    = /%=
    {
        out INT_DIV_CHANGE
    }
    = %=
    {
        out MOD_CHANGE
    }
    = ^=
    {
        out EXP_CHANGE
    }
    = >>=
    {
        out SHR_CHANGE
    }
    = <<=
    {
        out SHL_CHANGE
    }
    = and=
    {
        out AND_CHANGE
    }
    = or=
    {
        out OR_CHANGE 
    }
    = xor=
    {
        out XOR_CHANGE
    }
    ? ×=|\\cross=
    {
        out CROSS_CHANGE
    }
    ? ⋅=|\\dot=
    {
        out DOT_CHANGE
    }


    # Operators
    
    = new
    {
        out NEW
    }
    = as
    {
        out AS
    }
    
    = +
    {
        out ADD
    }
    = -
    {
        out SUB
    }
    = *
    {
        out MUL
    }
    = /
    {
        out DIV
    }
    = /%
    {
        out INT_DIV
    }
    = %
    {
        out MOD
    }
    = ^
    {
        out EXP
    }
    = >>
    {
        out SHIFT_RIGHT
    }
    = <<
    {
        out SHIFT_LEFT
    }
    ? ×|\\cross
    {
        out CROSS
    }
    ? ⋅|\\dot
    {
        out DOT
    }
    = contains
    {
        out CONTAINS
    }
    = \\[:identifier:]
    {
        out CUSTOM_OPERATOR
        storeString
    }
    
    = operator
    {
        out OPERATOR_ID
    }
    = operator[[:blank:]]*[.]
    {
        out SUF_OPERATOR_ID
        push S_AFTER_LITERAL
    }


    # Comparison operators

    = ?=
    {
        out EQUAL
    }
    = !=
    {
        out NOTEQ
    }
    = ?<-
    {
        out ASSIGNED
    }
    = !<-
    {
        out NOTASS
    }
    = <
    {
        out LESS
    }
    = >
    {
        out GREAT
    }
    = <=
    {
        out LEEQ
    }
    = >=
    {
        out GREQ
    }
    = is
    {
        out IS
    }


    # Logical operators
    
    = and
    {
        out AND
    }
    = or
    {
        out OR
    }
    = xor
    {
        out XOR
    }
    = not
    {
        out NOT
    }


    # Context operators
    
    = &
    {
        out CONTEXT_AND
    }
    = |
    {
        out CONTEXT_OR
    }
    = <>
    {
        out CONTEXT_XOR
    }


    # Value specifiers

    = mutable
    {
        out MUTABLE
    }
    = const
    {
        out CONST
    }
    = volatile
    {
        out VOLATILE
    }
    = virtual
    {
        out VIRTUAL
    }
    = static
    {
        out STATIC
    }


    # Trait specifiers

    = class
    {
        out CLASS
    }
    = final
    {
        out FINAL
    }


    # Literals

    = (
    {
        out LPAR
    }
    = )
    {
        out RPAR
    }
    = [
    {
        out LBRACK
    }
    = ]
    {
        out RBRACK
    }
    = {
    {
        out LBRACE
    }
    = }
    {
        out RBRACE
    }
    = .
    {
        out PLACEHOLDER
    }
    = ...
    {
        out RANGE
    }
    = ->
    {
        out VIRTUAL_FUNCTION_EXPR
    }
    = =>
    {
        out FUNCTION_EXPR
    }
    = <->
    {
        out VIRTUAL_COROUTINE_EXPR
    }
    = <=>
    {
        out COROUTINE_EXPR
    }


    # Words and values

    ? [:identifier:]
    {
        out IDENTIFIER
        storeString
    }
    ? [[:digit:]]+(_[[:digit:]]|[[:digit:]])*(\.[[:digit:]]+)?
    {
        out NUM_LIT
        push S_AFTER_LITERAL
        storeString
    }
    ? 0b[01]([_01]|[01])*(\.[_01]+)?
    {
        out NUM_B_LIT
        push S_AFTER_LITERAL
        storeString
    }
    ? 0o[0-7]([_0-7]|[0-7])*(\.[_0-7]+)?
    {
        out NUM_O_LIT
        push S_AFTER_LITERAL
        storeString
    }
    ? 0x[[:xdigit:]]([_[:xdigit:]]|[[:xdigit:]])*(\.[_[:xdigit:]]+)?
    {
        out NUM_X_LIT
        push S_AFTER_LITERAL
        storeString
    }
    ? "([^\\"]|\\.)*"
    {
        out STR_LIT
        push S_AFTER_LITERAL
        storeString
    }
    ? '([^\\']|\\.)'
    {
        out CHAR_LIT
        storeString
    }
    ? [:newl:]
    {
        out NL
    }
    ? [[:blank:]]
    {
    }
    = \*-
    {
        push S_SMULTILINE_COMMENT
    }
    = \*=
    {
        push S_DMULTILINE_COMMENT
    }
    ? \*\*[^[:newl:]]*[:newl:]
    {
        out NL
    }


@S_AFTER_LITERAL
    ? [:suffix:]
    {
        out LIT_SUFFIX
        storeString
        pop
    }
    ? 
    {
        pop
    }

@S_SMULTILINE_COMMENT
    = \*-
    {
        push S_SMULTILINE_COMMENT
    }
    = \*=
    {
        push S_DMULTILINE_COMMENT
    }
    = -\*
    {
        pop
    }
    # skip all until end of comment
    ? .
    {
    }

@S_DMULTILINE_COMMENT
    = \*-
    {
        push S_SMULTILINE_COMMENT
    }
    = \*=
    {
        push S_DMULTILINE_COMMENT
    }
    = =\*
    {
        pop
    }
    # skip all until end of comment
    ? .
    {
    }