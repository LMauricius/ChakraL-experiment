# operator groups (expressions/node productions) are defined like this:
# associativity('<' | '>') type('BINARY' | 'LUNARY' | 'RUNARY') nodeName [semNodeName]
# if the semantic node name is not specified, it will be set to the parse node name
#
# operators in a group are defined after the group, each in its own line, like this:
# (token name OR string corresponding to a token)
#
# @ symbol marks an externally defined production
# @nodeName
# if the nodeName is put before another operator group, 
# 	the next group will treat it as an expression of previous lower priority and a production will be added:
#	next = <operands:nodeName>
# if the nodeName is put after another operator group,
# 	it will be treated as an expression of next higher priority and a production will be added:
#	nodeName = <operands:prev>
# : symbol marks a custom production that will be added after productions for the previous operator group

@ExprHighest

< LUNARY ExprSign ExprLUnary
'+'
'-'

# We don't allow sign operators usage in expressions, except when surrounded by parentheses
: TightExpr = .:ExprSign
@ExprHighest

< BINARY ExprPrefixFunction ExprPrefixFunction
''

< LUNARY ExprCopy ExprLUnary
NEW

> BINARY ExprExponent ExprBinaryL2R
'^'

> BINARY ExprMultiplication ExprBinaryL2R
'*'
CROSS
DOT
'/'
'/%'
'%'

> BINARY ExprAddition ExprBinaryL2R
'+'
'-'

> BINARY ExprShift ExprBinaryL2R
'<<'
'>>'

> BINARY RangeLiteral RangeLiteral
RangeOperator

: Expression = .:RangeLiteral


> BINARY ExprComparison ExprBinaryL2R
'<'
'>'
'<='
'>='
'?='
'!='

> BINARY ExprCompAssigned assignmentCheck ExprBinaryL2R
ASSIGNED
NOTASS

> BINARY ExprLogAnd  ExprBinaryL2R
AND

> BINARY ExprLogXOr  ExprBinaryL2R
XOR

> BINARY ExprLogOr  ExprBinaryL2R
OR

: LogicalExpression = .:ExprLogOr
: Expression = WHETHER .:LogicalExpression
: Expression = .TightExpr






# old version:
# associativity('<' | '>') type('BINARY' | 'LUNARY' | 'RUNARY') productionName token|regex
