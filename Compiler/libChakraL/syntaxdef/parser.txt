# Newlines and leading whitespace chars are skipped in this file
# Lines starting with a '#' are comments
# Each line is a production definition, formatted as PARSE_NODE_TYPE = DEFINITION.
# The first definition specifies the starting (root) production.
# The definition works similar to a regex.
#	Instead of characters we use either production names or lexeme names.
#		Lexemes are referenced by their names or corresponding single-quoted strings.
#		Both are called 'symbols' in the rest of this comment
#	'*' is used for 0 or more repeating sequences
#	'+' is used for 1 or more repeating sequences
#	'|' is used for selecting a single option out of several sequences separated by '|'
#	parentheses ( '(' and ')' ) can be used for grouping the sub sequence
#	'?' makes the sequence optional. Alternatively the sequence can be surrounded with brackets ('[' and ']')
#	The symbols can be stored as named arguments by prefixing them with the argument name
#		followed by a semicolon ( NAME:SYMBOL ), without any spaces.
#		For lexeme strings the arg name is put immediately before the opening quote ( NAME:'QUOTE' )
#		If no argument name is specified (no prefix), it is assumed to be '' (empty string)
#		If the argument name is a dot ('.'), the symbol's semantic node will be forwarded,
#			and output instead of the production's own node.
#			If any symbol within a production's option is a forwarding symbol,
#				no other symbol can be assigned to a variable within that option
#			The semantic node output from the forwarding symbol must be of the same type as (or derived from) the production's node
#
# Lines starting with a '=' (without a production symbol)
# 	are alternate definitions for the last specified symbol.
#	This is a cleaner way than using '|'
# Lines starting with a '->' define the semantic node that will be output when the current production is parsed
#	'-' is a special string specifying that no semantic node will be output from the production
#	'::' is a special string that specifies a 'forwarding', i.e. that the semantic node of the first symbol
#		(that outputs a sem. node) will be passed as the output of the current production.
#		Requires a single named argument to be a dot ('.').
#	The actual ouput node of a production doesn't have to be the same type that is visible to other productions.
#		You can separate the visible type and the output type with a space.
#		Then, the production will create a node of the output type, but will store a node of the visible type. 
#		The output type must be derived from the visible type.
# Instead of lexeme names, strings corresponding to a specific lexer rule's regex can be used,
# 	enclosed with quotes. The first regex that the string fits is used and
# 	the string is replaced with the lexeme that the rule outputs.
#	The string allows c-like escape characters



File = <!> .:ContextBlock END_OF_STR
	-> ContextBlock ::


###
### *** ContextBlock definitions *** ###
###

ContextBlock = ( NL | descs::Description <!> <$> NL)*
ContextLine = descs::Description
			-> ContextBlock

Description 	= .:Statement
				= .:Requirement
				= .:Inclusion
				= .:TraitSpecifier
				-> Description

Requirement = REQUIREMENT cond:Expression
Inclusion = INCLUDING value:Expression

TraitSpecifier 	= token:CLASS
				= token:EXACT


###
### *** Expressions and values *** ###
###

UnaryOperator 	= op:SUB
				= op:INCREMENT
				= op:DECREMENT

BinaryOperator 	= op:ADD
				= op:SUB
				= op:MUL
				= op:DIV
				= op:INT_DIV
				= op:MOD
				= op:EXP
				= op:SHIFT_RIGHT
				= op:SHIFT_LEFT
				= op:CROSS
				= op:DOT
				= op:CONTAINS
				= op:CUSTOM_OPERATOR

RangeOperator = [left:LESS | left:EQUAL] '...' [right:LESS | right:EQUAL]

Identifier 	= name:IDENTIFIER
			= name:OPERATOR_ID <!> ( '(' <!> unary_op:UnaryOperator ')' | binary_op:BinaryOperator )
			= name:SUF_OPERATOR_ID <!> suf:LIT_SUFFIX

# 0th priority Expression
ExprHighest = .:Identifier
			= .:Literal
			-> Expression ::

# Expression that has to be solo or surrounded by parentheses
TightExpr -> Expression ::

# expressions are auto generated from the table in operatorTable.txt
>> ../autosyntaxdef/operatorProductionsAutogen.txt

Literal 	= .:FunctionLiteral
			= .:CoroutineLiteral
			= .:ContextExpressionLiteral
			= .:ListLiteral
			= .:DictLiteral
			= .:SetLiteral
			= .:ValueLiteral
			= .:ModuleReference
			-> Literal ::

ValueLiteral 	= val:NUM_LIT [ suf:LIT_SUFFIX ]
				= val:NUM_B_LIT [ suf:LIT_SUFFIX ]
				= val:NUM_O_LIT [ suf:LIT_SUFFIX ]
				= val:NUM_X_LIT [ suf:LIT_SUFFIX ]
				= val:STR_LIT [ suf:LIT_SUFFIX ]

ModuleReference = MODULE modulepath::IDENTIFIER [version:NUM_LIT]

ListLiteral = '[' NL+ <!>  items::Expression <$> ',' (NL* items::Expression <$> ',')* NL+ <$> ']'
			= '[' <!> items::Expression (<$> ',' items::Expression)* [','] <$> ']'
SetLiteral 	= '{' NL+ <!> items::Expression <$> ',' (NL* items::Expression <$> ',')* NL+ <$> '}'
			= '{' <!> items::Expression (<$> ',' items::Expression)* [','] <$> '}'
DictLiteral = '{' ':' NL+ <!> items::DictEntry <$> ',' (NL* items::DictEntry <$> ',')* NL+ <$> '}'
			= '{' ':' <!> items::DictEntry (<$> ',' items::DictEntry)* [','] <$> '}'
DictEntry = key:Expression ':' <!> NL* value:Expression

ContextExpressionLiteral 	= '(' NL+ <!> items::Description <$> ',' (NL* items::Description <$> ',')* NL+ <$> ')'
							= '(' <!> items::Description (<$> ',' items::Description)* [','] <$> ')'

FunctionLiteral = param:ContextExpressionLiteral FUNCTION_EXPR (block:ContextLine | NL <!> block:ContextBlock <$> BLOCK_END)
CoroutineLiteral = param:ContextExpressionLiteral COROUTINE_EXPR (block:ContextLine | NL <!> block:ContextBlock <$> BLOCK_END)


###
### *** Statements *** ###
###

Statement 	= .:WithStat
			= .:Change
			= .:Definition
			= .:MemberDecl
			= .:IfStat
			= .:LoopStat
			= .:JumpStat
			-> Statement ::

ExpressionOrBlock 	= expr:Expression
					= ':' <!> (block:ContextLine | NL <!> block:ContextBlock <$> BLOCK_END)
MemberDecl 	= member:Expression ( ':' <!> (valueSpecs::ValueSpecifier+ '=' <!> value:Expression | trait:Expression valueSpecs::ValueSpecifier* [ '=' <!> value:Expression ]) | '=' <!> value:Expression )
			= value:Expression

ValueSpecifier 	= token:MUTABLE
				= token:CONST
				= token:VOLATILE
				= token:VIRTUAL
				= token:STATIC

Definition 	= id:IDENTIFIER DEF <!> value:ExpressionOrBlock

IfStat 	= IF <!> cond:LogicalExpr <$> ':' ( exec:ContextLine [ <$> alt:ElseStatPart ] | NL <!> exec:ContextBlock ( <$> alt:ElseStatPart | <$> BLOCK_END) )
ElseStatPart 	= ELSE <!> <$> ':' (exec:ContextLine | NL <!> exec:ContextBlock <$> BLOCK_END)
				= .:ElifStatPart
				-> Statement
ElifStatPart 	= ELIF <!> cond:LogicalExpr <$> ':' ( exec:ContextLine [ <$> alt:ElseStatPart ] | NL <!> exec:ContextBlock ( <$> alt:ElseStatPart | <$> BLOCK_END) )
				-> Statement IfStat

LoopStat 	= LOOP_MARK <!> parts::LoopStatPart ( <$> ';' parts::LoopStatPart)* <$> ':' (block:ContextLine | NL <!> block:ContextBlock <$> BLOCK_END)
			= parts::LoopStatPart <!> <$> ':' (block:ContextLine | <$> NL <!> block:ContextBlock <$> BLOCK_END)
LoopStatPart 	= .:TimesLoopStatPart
				= .:ForLoopStatPart
				= .:WhileLoopStatPart
				-> LoopStatPart ::
TimesLoopStatPart 	= TIMES <!> count:Expression
ForLoopStatPart 	= FOR <!> id:IDENTIFIER IN iterable:Expression
WhileLoopStatPart 	= WHILE <!> cond:LogicalExpr

JumpStat 	= .:BreakStat
			= .:ContinueStat
			= .:ReturnStat
			= .:YieldStat
			-> JumpStat ::

BreakStat = BREAK <!> [ id:IDENTIFIER ]
ContinueStat = CONTINUE <!> [ id:IDENTIFIER ]
ReturnStat = RETURN <!> [ val:Expression ]
YieldStat = YIELD <!> [ val:Expression ]

WithStat = [funcs::IDENTIFIER (',' funcs::IDENTIFIER)* [','] ] WITH <!> entries::WithStatEntry ( ',' entries::WithStatEntry )* [','] ':' (block:ContextLine | NL <!> block:ContextBlock <$> BLOCK_END)
WithStatEntry 	= id:IDENTIFIER '=' <!> value:Expression
				= anonValue:Expression


###
### *** Assignments *** ###
###

ChangeOperator 	= op:'+='
				= op:'-='
				= op:'*='
				= op:'/='
				= op:'/%='
				= op:'%='
				= op:'^='
				= op:'>>='
				= op:'<<='
				= op:CROSS_CHANGE
				= op:DOT_CHANGE
				= op:CUSTOM_OPERATOR_CHANGE

Change = left:Expression op:ChangeOperator <!> NL* rights:Expression