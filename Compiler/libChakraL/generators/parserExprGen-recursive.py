from __future__ import annotations
from genUtil import *

def outputExprProductions(filenameIn: str, filenameOut: str):
	f = open(filenameOut, "wt")
	
	def LN(s: str):
		f.write(s)
		f.write('\n')

	def writeExprProds(exp: str):
		first = True
		for prod in exprProds:
			if first:
				LN(exp + " = <" + prod + ">")
			else:
				LN("\t= <" + prod + ">")
			first = False

	try:
		prevExpr = ""
		expr = ""
		exprProds = []

		LN("# This file is autogenerated. Do not edit!")

		for l, lineInd in meaningfulLines(filenameIn):
			if l[0] == '@':
				prevExpr = expr
				expr = l[1:]

				if len(prevExpr) > 0:
					writeExprProds(prevExpr)
					LN("")
					exprProds = [prevExpr]
					#LN(expr + " = <" + prevExpr + ">")
					
			else:
				defParts = l.split()
				assoc = defParts[0]
				optype = defParts[1]
				name = defParts[2]
				operator = defParts[3]

				if assoc == '<' or assoc == '>':
					pass
				else:
					raise FormatError("Expected < or >", lineInd)
				
				exprProds.append(name)
				#LN(expr + " = <" + name + ">")
				if optype == 'BINARY':
					if operator == "''":
						if assoc == '>':
							LN(name + " = <left:" + expr + "> <right:" + prevExpr + ">")
						else:
							LN(name + " = <left:" + prevExpr + "> <right:" + expr + ">")
					else:
						if assoc == '>':
							LN(name + " = <left:" + expr + "> " + operator + " <ONL> <right:" + prevExpr + ">")
						else:
							LN(name + " = <left:" + prevExpr + "> " + operator + " <ONL> <right:" + expr + ">")
				elif optype == 'RUNARY':
					if assoc == '>':
						LN(name + " = <val:" + expr + "> " + operator)
					else:
						raise FormatError("RUNARY can't be <", lineInd)
				elif optype == 'LUNARY':
					if assoc == '<':
						LN(name + " = " + operator + " <ONL> <val:" + expr + ">")
					else:
						raise FormatError("LUNARY can't be >", lineInd)
				else:
					raise FormatError("Expected BINARY or RUNARY or LUNARY", lineInd)

		writeExprProds(expr)

	except FormatError as e:
		print(e.message)
		sys.exit(1)

	f.close()