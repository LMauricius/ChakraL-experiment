// This file is autogenerated. Do not edit!

#include "chakralParser.h"
#include <vector>
#include <string_view>
#include <regex>

namespace ChakraL
{
    
    void ParseNode_file::process() {
        int a;
        int b;
    }
    
    void ParseNode_ONL::process() {
    }
    
    void ParseNode_contextBody::process() {
    }
    
    void ParseNode_contextBodyClosedBlock::process() {
    }
    
    void ParseNode_contextDescriptionEntry::process() {
    }
    
    void ParseNode_traitAssertion::process() {
    }
    
    void ParseNode_expression::process() {
    }
    
    void ParseNode_expr0::process() {
    }
    
    void ParseNode_identifier::process() {
    }
    
    void ParseNode_suffixFunction::process() {
    }
    
    void ParseNode_expr1::process() {
    }
    
    void ParseNode_suffixInc::process() {
    }
    
    void ParseNode_suffixDec::process() {
    }
    
    void ParseNode_copy::process() {
    }
    
    void ParseNode_prefixFunction::process() {
    }
    
    void ParseNode_expr2::process() {
    }
    
    void ParseNode_prefixInc::process() {
    }
    
    void ParseNode_prefixDec::process() {
    }
    
    void ParseNode_plus::process() {
    }
    
    void ParseNode_minus::process() {
    }
    
    void ParseNode_logNot::process() {
    }
    
    void ParseNode_expr3::process() {
    }
    
    void ParseNode_multiplication::process() {
    }
    
    void ParseNode_crossProduct::process() {
    }
    
    void ParseNode_dotProduct::process() {
    }
    
    void ParseNode_division::process() {
    }
    
    void ParseNode_divisionInt::process() {
    }
    
    void ParseNode_modulo::process() {
    }
    
    void ParseNode_expr4::process() {
    }
    
    void ParseNode_addition::process() {
    }
    
    void ParseNode_subtraction::process() {
    }
    
    void ParseNode_expr5::process() {
    }
    
    void ParseNode_shiftL::process() {
    }
    
    void ParseNode_shiftR::process() {
    }
    
    void ParseNode_expr6::process() {
    }
    
    void ParseNode_compLess::process() {
    }
    
    void ParseNode_compGreat::process() {
    }
    
    void ParseNode_compLeEq::process() {
    }
    
    void ParseNode_compGrEq::process() {
    }
    
    void ParseNode_expr7::process() {
    }
    
    void ParseNode_compEqual::process() {
    }
    
    void ParseNode_compNotEq::process() {
    }
    
    void ParseNode_compAssigned::process() {
    }
    
    void ParseNode_compNotAss::process() {
    }
    
    void ParseNode_expr8::process() {
    }
    
    void ParseNode_logAnd::process() {
    }
    
    void ParseNode_expr9::process() {
    }
    
    void ParseNode_logXOr::process() {
    }
    
    void ParseNode_expr10::process() {
    }
    
    void ParseNode_logOr::process() {
    }
    
    void ParseNode_exprLeast::process() {
    }
    
    void ParseNode_literal::process() {
    }
    
    void ParseNode_valueLiteral::process() {
    }
    
    void ParseNode_listLiteral::process() {
    }
    
    void ParseNode_setLiteral::process() {
    }
    
    void ParseNode_dictLiteral::process() {
    }
    
    void ParseNode_dictEntry::process() {
    }
    
    void ParseNode_contextLiteral::process() {
    }
    
    void ParseNode_memberDecl::process() {
    }
    
    void ParseNode_statement::process() {
    }
    
    void ParseNode_definition::process() {
    }
    
    void ParseNode_varDeclaration::process() {
    }
    
    void ParseNode_refDeclaration::process() {
    }
    
    void ParseNode_varRefDeclBody::process() {
    }
    
    void ParseNode_varRefDeclEntry::process() {
    }
    
    void ParseNode_varRefDeclEntryEqual::process() {
    }
    
    void ParseNode_varRefDeclEntryAssign::process() {
    }
    
    void ParseNode_ifStat::process() {
    }
    
    void ParseNode_elseStatPart::process() {
    }
    
    void ParseNode_loopStat::process() {
    }
    
    void ParseNode_loopStatPart::process() {
    }
    
    void ParseNode_timesLoopStatPart::process() {
    }
    
    void ParseNode_forLoopStatPart::process() {
    }
    
    void ParseNode_whileLoopStatPart::process() {
    }
    
    void ParseNode_jumpStat::process() {
    }
    
    void ParseNode_breakStat::process() {
    }
    
    void ParseNode_continueStat::process() {
    }
    
    void ParseNode_returnStat::process() {
    }
    
    void ParseNode_withStat::process() {
    }
    
    void ParseNode_withStatEntry::process() {
    }
    
    void ParseNode_assignmentEqual::process() {
    }
    
    void ParseNode_assignRef::process() {
    }
    
    void ParseNode_changeVal::process() {
    }
    
    void ParseNode_addChangeVal::process() {
    }
    
    void ParseNode_subChangeVal::process() {
    }
    
    void ParseNode_mulChangeVal::process() {
    }
    
    void ParseNode_crossChangeVal::process() {
    }
    
    void ParseNode_dotChangeVal::process() {
    }
    
    void ParseNode_divChangeVal::process() {
    }
    
    void ParseNode_intDivChangeVal::process() {
    }
    
    void ParseNode_modChangeVal::process() {
    }
    
    void ParseNode_shiftRChangeVal::process() {
    }
    
    void ParseNode_shiftLChangeVal::process() {
    }
    
    void ParseNode_andChangeVal::process() {
    }
    
    void ParseNode_orChangeVal::process() {
    }
    
    void ParseNode_xorChangeVal::process() {
    }
    
}
