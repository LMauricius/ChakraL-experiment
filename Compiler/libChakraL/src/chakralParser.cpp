// This file is autogenerated. Do not edit!

#include "chakralParser.h"
#include <vector>
#include <string_view>
#include <regex>

namespace ChakraL
{

    void ParseNode::process() {
    };
    
    void ParseNode::appendMove(ParseNode& other) {
        for (auto& varNodesPair : other.nodeLists) {
            const std::string &varName = varNodesPair.first;
            auto &otherList = varNodesPair.second;
            auto &myList = nodeLists[varName];
            myList.splice(otherList.begin(), otherList);
        }
        for (auto& varTokensPair : other.tokenLists) {
            const std::string &varName = varTokensPair.first;
            auto &otherList = varTokensPair.second;
            auto &myList = tokenLists[varName];
            otherList.splice(myList.begin(), myList);
        }
    };
    
    void h_file_1(ParserData& parserData, ParserBranch& branch);
    void h_ONL_1(ParserData& parserData, ParserBranch& branch);
    void h_contextBody_1(ParserData& parserData, ParserBranch& branch);
    void h_contextBody_2(ParserData& parserData, ParserBranch& branch);
    void h_contextBody_3(ParserData& parserData, ParserBranch& branch);
    void h_contextBodyClosedBlock_1(ParserData& parserData, ParserBranch& branch);
    void h_contextBodyClosedBlock_2(ParserData& parserData, ParserBranch& branch);
    void h_contextBodyClosedBlock_3(ParserData& parserData, ParserBranch& branch);
    void h_contextBodyClosedBlock_4(ParserData& parserData, ParserBranch& branch);
    void h_contextDescriptionEntry_1(ParserData& parserData, ParserBranch& branch);
    void h_contextDescriptionEntry_2(ParserData& parserData, ParserBranch& branch);
    void h_contextDescriptionEntry_3(ParserData& parserData, ParserBranch& branch);
    void h_contextDescriptionEntry_4(ParserData& parserData, ParserBranch& branch);
    void h_traitAssertion_1(ParserData& parserData, ParserBranch& branch);
    void h_traitAssertion_2(ParserData& parserData, ParserBranch& branch);
    void h_expression_1(ParserData& parserData, ParserBranch& branch);
    void h_expr0_1(ParserData& parserData, ParserBranch& branch);
    void h_expr0_2(ParserData& parserData, ParserBranch& branch);
    void h_expr0_3(ParserData& parserData, ParserBranch& branch);
    void h_expr0_4(ParserData& parserData, ParserBranch& branch);
    void h_expr0_5(ParserData& parserData, ParserBranch& branch);
    void h_expr0_6(ParserData& parserData, ParserBranch& branch);
    void h_expr0_7(ParserData& parserData, ParserBranch& branch);
    void h_identifier_1(ParserData& parserData, ParserBranch& branch);
    void h_suffixFunction_1(ParserData& parserData, ParserBranch& branch);
    void h_suffixFunction_2(ParserData& parserData, ParserBranch& branch);
    void h_suffixFunction_3(ParserData& parserData, ParserBranch& branch);
    void h_suffixFunction_4(ParserData& parserData, ParserBranch& branch);
    void h_expr1_1(ParserData& parserData, ParserBranch& branch);
    void h_expr1_2(ParserData& parserData, ParserBranch& branch);
    void h_suffixInc_1(ParserData& parserData, ParserBranch& branch);
    void h_suffixInc_2(ParserData& parserData, ParserBranch& branch);
    void h_suffixDec_1(ParserData& parserData, ParserBranch& branch);
    void h_suffixDec_2(ParserData& parserData, ParserBranch& branch);
    void h_copy_1(ParserData& parserData, ParserBranch& branch);
    void h_copy_2(ParserData& parserData, ParserBranch& branch);
    void h_copy_3(ParserData& parserData, ParserBranch& branch);
    void h_prefixFunction_1(ParserData& parserData, ParserBranch& branch);
    void h_prefixFunction_2(ParserData& parserData, ParserBranch& branch);
    void h_expr2_1(ParserData& parserData, ParserBranch& branch);
    void h_expr2_2(ParserData& parserData, ParserBranch& branch);
    void h_expr2_3(ParserData& parserData, ParserBranch& branch);
    void h_expr2_4(ParserData& parserData, ParserBranch& branch);
    void h_expr2_5(ParserData& parserData, ParserBranch& branch);
    void h_prefixInc_1(ParserData& parserData, ParserBranch& branch);
    void h_prefixInc_2(ParserData& parserData, ParserBranch& branch);
    void h_prefixInc_3(ParserData& parserData, ParserBranch& branch);
    void h_prefixDec_1(ParserData& parserData, ParserBranch& branch);
    void h_prefixDec_2(ParserData& parserData, ParserBranch& branch);
    void h_prefixDec_3(ParserData& parserData, ParserBranch& branch);
    void h_plus_1(ParserData& parserData, ParserBranch& branch);
    void h_plus_2(ParserData& parserData, ParserBranch& branch);
    void h_plus_3(ParserData& parserData, ParserBranch& branch);
    void h_minus_1(ParserData& parserData, ParserBranch& branch);
    void h_minus_2(ParserData& parserData, ParserBranch& branch);
    void h_minus_3(ParserData& parserData, ParserBranch& branch);
    void h_logNot_1(ParserData& parserData, ParserBranch& branch);
    void h_logNot_2(ParserData& parserData, ParserBranch& branch);
    void h_logNot_3(ParserData& parserData, ParserBranch& branch);
    void h_expr3_1(ParserData& parserData, ParserBranch& branch);
    void h_expr3_2(ParserData& parserData, ParserBranch& branch);
    void h_expr3_3(ParserData& parserData, ParserBranch& branch);
    void h_expr3_4(ParserData& parserData, ParserBranch& branch);
    void h_expr3_5(ParserData& parserData, ParserBranch& branch);
    void h_expr3_6(ParserData& parserData, ParserBranch& branch);
    void h_multiplication_1(ParserData& parserData, ParserBranch& branch);
    void h_multiplication_2(ParserData& parserData, ParserBranch& branch);
    void h_multiplication_3(ParserData& parserData, ParserBranch& branch);
    void h_multiplication_4(ParserData& parserData, ParserBranch& branch);
    void h_crossProduct_1(ParserData& parserData, ParserBranch& branch);
    void h_crossProduct_2(ParserData& parserData, ParserBranch& branch);
    void h_crossProduct_3(ParserData& parserData, ParserBranch& branch);
    void h_crossProduct_4(ParserData& parserData, ParserBranch& branch);
    void h_dotProduct_1(ParserData& parserData, ParserBranch& branch);
    void h_dotProduct_2(ParserData& parserData, ParserBranch& branch);
    void h_dotProduct_3(ParserData& parserData, ParserBranch& branch);
    void h_dotProduct_4(ParserData& parserData, ParserBranch& branch);
    void h_division_1(ParserData& parserData, ParserBranch& branch);
    void h_division_2(ParserData& parserData, ParserBranch& branch);
    void h_division_3(ParserData& parserData, ParserBranch& branch);
    void h_division_4(ParserData& parserData, ParserBranch& branch);
    void h_divisionInt_1(ParserData& parserData, ParserBranch& branch);
    void h_divisionInt_2(ParserData& parserData, ParserBranch& branch);
    void h_divisionInt_3(ParserData& parserData, ParserBranch& branch);
    void h_divisionInt_4(ParserData& parserData, ParserBranch& branch);
    void h_modulo_1(ParserData& parserData, ParserBranch& branch);
    void h_modulo_2(ParserData& parserData, ParserBranch& branch);
    void h_modulo_3(ParserData& parserData, ParserBranch& branch);
    void h_modulo_4(ParserData& parserData, ParserBranch& branch);
    void h_expr4_1(ParserData& parserData, ParserBranch& branch);
    void h_expr4_2(ParserData& parserData, ParserBranch& branch);
    void h_expr4_3(ParserData& parserData, ParserBranch& branch);
    void h_expr4_4(ParserData& parserData, ParserBranch& branch);
    void h_expr4_5(ParserData& parserData, ParserBranch& branch);
    void h_expr4_6(ParserData& parserData, ParserBranch& branch);
    void h_expr4_7(ParserData& parserData, ParserBranch& branch);
    void h_addition_1(ParserData& parserData, ParserBranch& branch);
    void h_addition_2(ParserData& parserData, ParserBranch& branch);
    void h_addition_3(ParserData& parserData, ParserBranch& branch);
    void h_addition_4(ParserData& parserData, ParserBranch& branch);
    void h_subtraction_1(ParserData& parserData, ParserBranch& branch);
    void h_subtraction_2(ParserData& parserData, ParserBranch& branch);
    void h_subtraction_3(ParserData& parserData, ParserBranch& branch);
    void h_subtraction_4(ParserData& parserData, ParserBranch& branch);
    void h_expr5_1(ParserData& parserData, ParserBranch& branch);
    void h_expr5_2(ParserData& parserData, ParserBranch& branch);
    void h_expr5_3(ParserData& parserData, ParserBranch& branch);
    void h_shiftL_1(ParserData& parserData, ParserBranch& branch);
    void h_shiftL_2(ParserData& parserData, ParserBranch& branch);
    void h_shiftL_3(ParserData& parserData, ParserBranch& branch);
    void h_shiftL_4(ParserData& parserData, ParserBranch& branch);
    void h_shiftR_1(ParserData& parserData, ParserBranch& branch);
    void h_shiftR_2(ParserData& parserData, ParserBranch& branch);
    void h_shiftR_3(ParserData& parserData, ParserBranch& branch);
    void h_shiftR_4(ParserData& parserData, ParserBranch& branch);
    void h_expr6_1(ParserData& parserData, ParserBranch& branch);
    void h_expr6_2(ParserData& parserData, ParserBranch& branch);
    void h_expr6_3(ParserData& parserData, ParserBranch& branch);
    void h_compLess_1(ParserData& parserData, ParserBranch& branch);
    void h_compLess_2(ParserData& parserData, ParserBranch& branch);
    void h_compLess_3(ParserData& parserData, ParserBranch& branch);
    void h_compLess_4(ParserData& parserData, ParserBranch& branch);
    void h_compGreat_1(ParserData& parserData, ParserBranch& branch);
    void h_compGreat_2(ParserData& parserData, ParserBranch& branch);
    void h_compGreat_3(ParserData& parserData, ParserBranch& branch);
    void h_compGreat_4(ParserData& parserData, ParserBranch& branch);
    void h_compLeEq_1(ParserData& parserData, ParserBranch& branch);
    void h_compLeEq_2(ParserData& parserData, ParserBranch& branch);
    void h_compLeEq_3(ParserData& parserData, ParserBranch& branch);
    void h_compLeEq_4(ParserData& parserData, ParserBranch& branch);
    void h_compGrEq_1(ParserData& parserData, ParserBranch& branch);
    void h_compGrEq_2(ParserData& parserData, ParserBranch& branch);
    void h_compGrEq_3(ParserData& parserData, ParserBranch& branch);
    void h_compGrEq_4(ParserData& parserData, ParserBranch& branch);
    void h_expr7_1(ParserData& parserData, ParserBranch& branch);
    void h_expr7_2(ParserData& parserData, ParserBranch& branch);
    void h_expr7_3(ParserData& parserData, ParserBranch& branch);
    void h_expr7_4(ParserData& parserData, ParserBranch& branch);
    void h_expr7_5(ParserData& parserData, ParserBranch& branch);
    void h_compEqual_1(ParserData& parserData, ParserBranch& branch);
    void h_compEqual_2(ParserData& parserData, ParserBranch& branch);
    void h_compEqual_3(ParserData& parserData, ParserBranch& branch);
    void h_compEqual_4(ParserData& parserData, ParserBranch& branch);
    void h_compNotEq_1(ParserData& parserData, ParserBranch& branch);
    void h_compNotEq_2(ParserData& parserData, ParserBranch& branch);
    void h_compNotEq_3(ParserData& parserData, ParserBranch& branch);
    void h_compNotEq_4(ParserData& parserData, ParserBranch& branch);
    void h_compAssigned_1(ParserData& parserData, ParserBranch& branch);
    void h_compAssigned_2(ParserData& parserData, ParserBranch& branch);
    void h_compAssigned_3(ParserData& parserData, ParserBranch& branch);
    void h_compAssigned_4(ParserData& parserData, ParserBranch& branch);
    void h_compNotAss_1(ParserData& parserData, ParserBranch& branch);
    void h_compNotAss_2(ParserData& parserData, ParserBranch& branch);
    void h_compNotAss_3(ParserData& parserData, ParserBranch& branch);
    void h_compNotAss_4(ParserData& parserData, ParserBranch& branch);
    void h_expr8_1(ParserData& parserData, ParserBranch& branch);
    void h_expr8_2(ParserData& parserData, ParserBranch& branch);
    void h_expr8_3(ParserData& parserData, ParserBranch& branch);
    void h_expr8_4(ParserData& parserData, ParserBranch& branch);
    void h_expr8_5(ParserData& parserData, ParserBranch& branch);
    void h_logAnd_1(ParserData& parserData, ParserBranch& branch);
    void h_logAnd_2(ParserData& parserData, ParserBranch& branch);
    void h_logAnd_3(ParserData& parserData, ParserBranch& branch);
    void h_logAnd_4(ParserData& parserData, ParserBranch& branch);
    void h_expr9_1(ParserData& parserData, ParserBranch& branch);
    void h_expr9_2(ParserData& parserData, ParserBranch& branch);
    void h_logXOr_1(ParserData& parserData, ParserBranch& branch);
    void h_logXOr_2(ParserData& parserData, ParserBranch& branch);
    void h_logXOr_3(ParserData& parserData, ParserBranch& branch);
    void h_logXOr_4(ParserData& parserData, ParserBranch& branch);
    void h_expr10_1(ParserData& parserData, ParserBranch& branch);
    void h_expr10_2(ParserData& parserData, ParserBranch& branch);
    void h_logOr_1(ParserData& parserData, ParserBranch& branch);
    void h_logOr_2(ParserData& parserData, ParserBranch& branch);
    void h_logOr_3(ParserData& parserData, ParserBranch& branch);
    void h_logOr_4(ParserData& parserData, ParserBranch& branch);
    void h_exprLeast_1(ParserData& parserData, ParserBranch& branch);
    void h_exprLeast_2(ParserData& parserData, ParserBranch& branch);
    void h_literal_1(ParserData& parserData, ParserBranch& branch);
    void h_literal_2(ParserData& parserData, ParserBranch& branch);
    void h_literal_3(ParserData& parserData, ParserBranch& branch);
    void h_literal_4(ParserData& parserData, ParserBranch& branch);
    void h_literal_5(ParserData& parserData, ParserBranch& branch);
    void h_valueLiteral_1(ParserData& parserData, ParserBranch& branch);
    void h_valueLiteral_2(ParserData& parserData, ParserBranch& branch);
    void h_valueLiteral_3(ParserData& parserData, ParserBranch& branch);
    void h_valueLiteral_4(ParserData& parserData, ParserBranch& branch);
    void h_valueLiteral_5(ParserData& parserData, ParserBranch& branch);
    void h_valueLiteral_6(ParserData& parserData, ParserBranch& branch);
    void h_valueLiteral_7(ParserData& parserData, ParserBranch& branch);
    void h_valueLiteral_8(ParserData& parserData, ParserBranch& branch);
    void h_valueLiteral_9(ParserData& parserData, ParserBranch& branch);
    void h_valueLiteral_10(ParserData& parserData, ParserBranch& branch);
    void h_valueLiteral_11(ParserData& parserData, ParserBranch& branch);
    void h_valueLiteral_12(ParserData& parserData, ParserBranch& branch);
    void h_valueLiteral_13(ParserData& parserData, ParserBranch& branch);
    void h_valueLiteral_14(ParserData& parserData, ParserBranch& branch);
    void h_valueLiteral_15(ParserData& parserData, ParserBranch& branch);
    void h_listLiteral_1(ParserData& parserData, ParserBranch& branch);
    void h_listLiteral_2(ParserData& parserData, ParserBranch& branch);
    void h_listLiteral_3(ParserData& parserData, ParserBranch& branch);
    void h_listLiteral_4(ParserData& parserData, ParserBranch& branch);
    void h_listLiteral_5(ParserData& parserData, ParserBranch& branch);
    void h_listLiteral_6(ParserData& parserData, ParserBranch& branch);
    void h_listLiteral_7(ParserData& parserData, ParserBranch& branch);
    void h_listLiteral_8(ParserData& parserData, ParserBranch& branch);
    void h_listLiteral_9(ParserData& parserData, ParserBranch& branch);
    void h_listLiteral_10(ParserData& parserData, ParserBranch& branch);
    void h_listLiteral_11(ParserData& parserData, ParserBranch& branch);
    void h_listLiteral_12(ParserData& parserData, ParserBranch& branch);
    void h_listLiteral_13(ParserData& parserData, ParserBranch& branch);
    void h_listLiteral_14(ParserData& parserData, ParserBranch& branch);
    void h_listLiteral_15(ParserData& parserData, ParserBranch& branch);
    void h_listLiteral_16(ParserData& parserData, ParserBranch& branch);
    void h_setLiteral_1(ParserData& parserData, ParserBranch& branch);
    void h_setLiteral_2(ParserData& parserData, ParserBranch& branch);
    void h_setLiteral_3(ParserData& parserData, ParserBranch& branch);
    void h_setLiteral_4(ParserData& parserData, ParserBranch& branch);
    void h_setLiteral_5(ParserData& parserData, ParserBranch& branch);
    void h_setLiteral_6(ParserData& parserData, ParserBranch& branch);
    void h_setLiteral_7(ParserData& parserData, ParserBranch& branch);
    void h_setLiteral_8(ParserData& parserData, ParserBranch& branch);
    void h_setLiteral_9(ParserData& parserData, ParserBranch& branch);
    void h_setLiteral_10(ParserData& parserData, ParserBranch& branch);
    void h_setLiteral_11(ParserData& parserData, ParserBranch& branch);
    void h_setLiteral_12(ParserData& parserData, ParserBranch& branch);
    void h_setLiteral_13(ParserData& parserData, ParserBranch& branch);
    void h_setLiteral_14(ParserData& parserData, ParserBranch& branch);
    void h_setLiteral_15(ParserData& parserData, ParserBranch& branch);
    void h_setLiteral_16(ParserData& parserData, ParserBranch& branch);
    void h_dictLiteral_1(ParserData& parserData, ParserBranch& branch);
    void h_dictLiteral_2(ParserData& parserData, ParserBranch& branch);
    void h_dictLiteral_3(ParserData& parserData, ParserBranch& branch);
    void h_dictLiteral_4(ParserData& parserData, ParserBranch& branch);
    void h_dictLiteral_5(ParserData& parserData, ParserBranch& branch);
    void h_dictLiteral_6(ParserData& parserData, ParserBranch& branch);
    void h_dictLiteral_7(ParserData& parserData, ParserBranch& branch);
    void h_dictLiteral_8(ParserData& parserData, ParserBranch& branch);
    void h_dictLiteral_9(ParserData& parserData, ParserBranch& branch);
    void h_dictLiteral_10(ParserData& parserData, ParserBranch& branch);
    void h_dictLiteral_11(ParserData& parserData, ParserBranch& branch);
    void h_dictLiteral_12(ParserData& parserData, ParserBranch& branch);
    void h_dictLiteral_13(ParserData& parserData, ParserBranch& branch);
    void h_dictLiteral_14(ParserData& parserData, ParserBranch& branch);
    void h_dictLiteral_15(ParserData& parserData, ParserBranch& branch);
    void h_dictLiteral_16(ParserData& parserData, ParserBranch& branch);
    void h_dictLiteral_17(ParserData& parserData, ParserBranch& branch);
    void h_dictLiteral_18(ParserData& parserData, ParserBranch& branch);
    void h_dictEntry_1(ParserData& parserData, ParserBranch& branch);
    void h_dictEntry_2(ParserData& parserData, ParserBranch& branch);
    void h_dictEntry_3(ParserData& parserData, ParserBranch& branch);
    void h_dictEntry_4(ParserData& parserData, ParserBranch& branch);
    void h_contextLiteral_1(ParserData& parserData, ParserBranch& branch);
    void h_contextLiteral_2(ParserData& parserData, ParserBranch& branch);
    void h_contextLiteral_3(ParserData& parserData, ParserBranch& branch);
    void h_contextLiteral_4(ParserData& parserData, ParserBranch& branch);
    void h_contextLiteral_5(ParserData& parserData, ParserBranch& branch);
    void h_contextLiteral_6(ParserData& parserData, ParserBranch& branch);
    void h_contextLiteral_7(ParserData& parserData, ParserBranch& branch);
    void h_contextLiteral_8(ParserData& parserData, ParserBranch& branch);
    void h_contextLiteral_9(ParserData& parserData, ParserBranch& branch);
    void h_contextLiteral_10(ParserData& parserData, ParserBranch& branch);
    void h_contextLiteral_11(ParserData& parserData, ParserBranch& branch);
    void h_contextLiteral_12(ParserData& parserData, ParserBranch& branch);
    void h_contextLiteral_13(ParserData& parserData, ParserBranch& branch);
    void h_contextLiteral_14(ParserData& parserData, ParserBranch& branch);
    void h_contextLiteral_15(ParserData& parserData, ParserBranch& branch);
    void h_contextLiteral_16(ParserData& parserData, ParserBranch& branch);
    void h_memberDecl_1(ParserData& parserData, ParserBranch& branch);
    void h_memberDecl_2(ParserData& parserData, ParserBranch& branch);
    void h_memberDecl_3(ParserData& parserData, ParserBranch& branch);
    void h_statement_1(ParserData& parserData, ParserBranch& branch);
    void h_statement_2(ParserData& parserData, ParserBranch& branch);
    void h_statement_3(ParserData& parserData, ParserBranch& branch);
    void h_statement_4(ParserData& parserData, ParserBranch& branch);
    void h_statement_5(ParserData& parserData, ParserBranch& branch);
    void h_statement_6(ParserData& parserData, ParserBranch& branch);
    void h_statement_7(ParserData& parserData, ParserBranch& branch);
    void h_statement_8(ParserData& parserData, ParserBranch& branch);
    void h_definition_1(ParserData& parserData, ParserBranch& branch);
    void h_definition_2(ParserData& parserData, ParserBranch& branch);
    void h_definition_3(ParserData& parserData, ParserBranch& branch);
    void h_definition_4(ParserData& parserData, ParserBranch& branch);
    void h_definition_5(ParserData& parserData, ParserBranch& branch);
    void h_definition_6(ParserData& parserData, ParserBranch& branch);
    void h_definition_7(ParserData& parserData, ParserBranch& branch);
    void h_definition_8(ParserData& parserData, ParserBranch& branch);
    void h_definition_9(ParserData& parserData, ParserBranch& branch);
    void h_definition_10(ParserData& parserData, ParserBranch& branch);
    void h_varDeclaration_1(ParserData& parserData, ParserBranch& branch);
    void h_varDeclaration_2(ParserData& parserData, ParserBranch& branch);
    void h_refDeclaration_1(ParserData& parserData, ParserBranch& branch);
    void h_refDeclaration_2(ParserData& parserData, ParserBranch& branch);
    void h_varRefDeclBody_1(ParserData& parserData, ParserBranch& branch);
    void h_varRefDeclBody_2(ParserData& parserData, ParserBranch& branch);
    void h_varRefDeclBody_3(ParserData& parserData, ParserBranch& branch);
    void h_varRefDeclBody_4(ParserData& parserData, ParserBranch& branch);
    void h_varRefDeclBody_5(ParserData& parserData, ParserBranch& branch);
    void h_varRefDeclEntry_1(ParserData& parserData, ParserBranch& branch);
    void h_varRefDeclEntry_2(ParserData& parserData, ParserBranch& branch);
    void h_varRefDeclEntryEqual_1(ParserData& parserData, ParserBranch& branch);
    void h_varRefDeclEntryEqual_2(ParserData& parserData, ParserBranch& branch);
    void h_varRefDeclEntryEqual_3(ParserData& parserData, ParserBranch& branch);
    void h_varRefDeclEntryEqual_4(ParserData& parserData, ParserBranch& branch);
    void h_varRefDeclEntryAssign_1(ParserData& parserData, ParserBranch& branch);
    void h_varRefDeclEntryAssign_2(ParserData& parserData, ParserBranch& branch);
    void h_varRefDeclEntryAssign_3(ParserData& parserData, ParserBranch& branch);
    void h_varRefDeclEntryAssign_4(ParserData& parserData, ParserBranch& branch);
    void h_ifStat_1(ParserData& parserData, ParserBranch& branch);
    void h_ifStat_2(ParserData& parserData, ParserBranch& branch);
    void h_ifStat_3(ParserData& parserData, ParserBranch& branch);
    void h_ifStat_4(ParserData& parserData, ParserBranch& branch);
    void h_ifStat_5(ParserData& parserData, ParserBranch& branch);
    void h_ifStat_6(ParserData& parserData, ParserBranch& branch);
    void h_ifStat_7(ParserData& parserData, ParserBranch& branch);
    void h_ifStat_8(ParserData& parserData, ParserBranch& branch);
    void h_ifStat_9(ParserData& parserData, ParserBranch& branch);
    void h_ifStat_10(ParserData& parserData, ParserBranch& branch);
    void h_ifStat_11(ParserData& parserData, ParserBranch& branch);
    void h_ifStat_12(ParserData& parserData, ParserBranch& branch);
    void h_ifStat_13(ParserData& parserData, ParserBranch& branch);
    void h_ifStat_14(ParserData& parserData, ParserBranch& branch);
    void h_elseStatPart_1(ParserData& parserData, ParserBranch& branch);
    void h_elseStatPart_2(ParserData& parserData, ParserBranch& branch);
    void h_elseStatPart_3(ParserData& parserData, ParserBranch& branch);
    void h_elseStatPart_4(ParserData& parserData, ParserBranch& branch);
    void h_elseStatPart_5(ParserData& parserData, ParserBranch& branch);
    void h_elseStatPart_6(ParserData& parserData, ParserBranch& branch);
    void h_elseStatPart_7(ParserData& parserData, ParserBranch& branch);
    void h_elseStatPart_8(ParserData& parserData, ParserBranch& branch);
    void h_elseStatPart_9(ParserData& parserData, ParserBranch& branch);
    void h_elseStatPart_10(ParserData& parserData, ParserBranch& branch);
    void h_elseStatPart_11(ParserData& parserData, ParserBranch& branch);
    void h_elseStatPart_12(ParserData& parserData, ParserBranch& branch);
    void h_elseStatPart_13(ParserData& parserData, ParserBranch& branch);
    void h_elseStatPart_14(ParserData& parserData, ParserBranch& branch);
    void h_elseStatPart_15(ParserData& parserData, ParserBranch& branch);
    void h_elseStatPart_16(ParserData& parserData, ParserBranch& branch);
    void h_elseStatPart_17(ParserData& parserData, ParserBranch& branch);
    void h_elseStatPart_18(ParserData& parserData, ParserBranch& branch);
    void h_elseStatPart_19(ParserData& parserData, ParserBranch& branch);
    void h_elseStatPart_20(ParserData& parserData, ParserBranch& branch);
    void h_elseStatPart_21(ParserData& parserData, ParserBranch& branch);
    void h_loopStat_1(ParserData& parserData, ParserBranch& branch);
    void h_loopStat_2(ParserData& parserData, ParserBranch& branch);
    void h_loopStat_3(ParserData& parserData, ParserBranch& branch);
    void h_loopStat_4(ParserData& parserData, ParserBranch& branch);
    void h_loopStat_5(ParserData& parserData, ParserBranch& branch);
    void h_loopStat_6(ParserData& parserData, ParserBranch& branch);
    void h_loopStat_7(ParserData& parserData, ParserBranch& branch);
    void h_loopStatPart_1(ParserData& parserData, ParserBranch& branch);
    void h_loopStatPart_2(ParserData& parserData, ParserBranch& branch);
    void h_loopStatPart_3(ParserData& parserData, ParserBranch& branch);
    void h_timesLoopStatPart_1(ParserData& parserData, ParserBranch& branch);
    void h_timesLoopStatPart_2(ParserData& parserData, ParserBranch& branch);
    void h_forLoopStatPart_1(ParserData& parserData, ParserBranch& branch);
    void h_forLoopStatPart_2(ParserData& parserData, ParserBranch& branch);
    void h_forLoopStatPart_3(ParserData& parserData, ParserBranch& branch);
    void h_forLoopStatPart_4(ParserData& parserData, ParserBranch& branch);
    void h_whileLoopStatPart_1(ParserData& parserData, ParserBranch& branch);
    void h_whileLoopStatPart_2(ParserData& parserData, ParserBranch& branch);
    void h_jumpStat_1(ParserData& parserData, ParserBranch& branch);
    void h_jumpStat_2(ParserData& parserData, ParserBranch& branch);
    void h_jumpStat_3(ParserData& parserData, ParserBranch& branch);
    void h_breakStat_1(ParserData& parserData, ParserBranch& branch);
    void h_continueStat_1(ParserData& parserData, ParserBranch& branch);
    void h_returnStat_1(ParserData& parserData, ParserBranch& branch);
    void h_returnStat_2(ParserData& parserData, ParserBranch& branch);
    void h_returnStat_3(ParserData& parserData, ParserBranch& branch);
    void h_withStat_1(ParserData& parserData, ParserBranch& branch);
    void h_withStat_2(ParserData& parserData, ParserBranch& branch);
    void h_withStat_3(ParserData& parserData, ParserBranch& branch);
    void h_withStat_4(ParserData& parserData, ParserBranch& branch);
    void h_withStat_5(ParserData& parserData, ParserBranch& branch);
    void h_withStat_6(ParserData& parserData, ParserBranch& branch);
    void h_withStat_7(ParserData& parserData, ParserBranch& branch);
    void h_withStatEntry_1(ParserData& parserData, ParserBranch& branch);
    void h_withStatEntry_2(ParserData& parserData, ParserBranch& branch);
    void h_withStatEntry_3(ParserData& parserData, ParserBranch& branch);
    void h_withStatEntry_4(ParserData& parserData, ParserBranch& branch);
    void h_assignmentEqual_1(ParserData& parserData, ParserBranch& branch);
    void h_assignmentEqual_2(ParserData& parserData, ParserBranch& branch);
    void h_assignmentEqual_3(ParserData& parserData, ParserBranch& branch);
    void h_assignmentEqual_4(ParserData& parserData, ParserBranch& branch);
    void h_assignmentEqual_5(ParserData& parserData, ParserBranch& branch);
    void h_assignmentEqual_6(ParserData& parserData, ParserBranch& branch);
    void h_assignmentEqual_7(ParserData& parserData, ParserBranch& branch);
    void h_assignmentEqual_8(ParserData& parserData, ParserBranch& branch);
    void h_assignmentEqual_9(ParserData& parserData, ParserBranch& branch);
    void h_assignmentEqual_10(ParserData& parserData, ParserBranch& branch);
    void h_assignmentEqual_11(ParserData& parserData, ParserBranch& branch);
    void h_assignmentEqual_12(ParserData& parserData, ParserBranch& branch);
    void h_assignmentEqual_13(ParserData& parserData, ParserBranch& branch);
    void h_assignmentEqual_14(ParserData& parserData, ParserBranch& branch);
    void h_assignmentEqual_15(ParserData& parserData, ParserBranch& branch);
    void h_assignRef_1(ParserData& parserData, ParserBranch& branch);
    void h_assignRef_2(ParserData& parserData, ParserBranch& branch);
    void h_assignRef_3(ParserData& parserData, ParserBranch& branch);
    void h_assignRef_4(ParserData& parserData, ParserBranch& branch);
    void h_assignRef_5(ParserData& parserData, ParserBranch& branch);
    void h_changeVal_1(ParserData& parserData, ParserBranch& branch);
    void h_changeVal_2(ParserData& parserData, ParserBranch& branch);
    void h_changeVal_3(ParserData& parserData, ParserBranch& branch);
    void h_changeVal_4(ParserData& parserData, ParserBranch& branch);
    void h_changeVal_5(ParserData& parserData, ParserBranch& branch);
    void h_addChangeVal_1(ParserData& parserData, ParserBranch& branch);
    void h_addChangeVal_2(ParserData& parserData, ParserBranch& branch);
    void h_addChangeVal_3(ParserData& parserData, ParserBranch& branch);
    void h_addChangeVal_4(ParserData& parserData, ParserBranch& branch);
    void h_addChangeVal_5(ParserData& parserData, ParserBranch& branch);
    void h_subChangeVal_1(ParserData& parserData, ParserBranch& branch);
    void h_subChangeVal_2(ParserData& parserData, ParserBranch& branch);
    void h_subChangeVal_3(ParserData& parserData, ParserBranch& branch);
    void h_subChangeVal_4(ParserData& parserData, ParserBranch& branch);
    void h_subChangeVal_5(ParserData& parserData, ParserBranch& branch);
    void h_mulChangeVal_1(ParserData& parserData, ParserBranch& branch);
    void h_mulChangeVal_2(ParserData& parserData, ParserBranch& branch);
    void h_mulChangeVal_3(ParserData& parserData, ParserBranch& branch);
    void h_mulChangeVal_4(ParserData& parserData, ParserBranch& branch);
    void h_mulChangeVal_5(ParserData& parserData, ParserBranch& branch);
    void h_crossChangeVal_1(ParserData& parserData, ParserBranch& branch);
    void h_crossChangeVal_2(ParserData& parserData, ParserBranch& branch);
    void h_crossChangeVal_3(ParserData& parserData, ParserBranch& branch);
    void h_crossChangeVal_4(ParserData& parserData, ParserBranch& branch);
    void h_crossChangeVal_5(ParserData& parserData, ParserBranch& branch);
    void h_dotChangeVal_1(ParserData& parserData, ParserBranch& branch);
    void h_dotChangeVal_2(ParserData& parserData, ParserBranch& branch);
    void h_dotChangeVal_3(ParserData& parserData, ParserBranch& branch);
    void h_dotChangeVal_4(ParserData& parserData, ParserBranch& branch);
    void h_dotChangeVal_5(ParserData& parserData, ParserBranch& branch);
    void h_divChangeVal_1(ParserData& parserData, ParserBranch& branch);
    void h_divChangeVal_2(ParserData& parserData, ParserBranch& branch);
    void h_divChangeVal_3(ParserData& parserData, ParserBranch& branch);
    void h_divChangeVal_4(ParserData& parserData, ParserBranch& branch);
    void h_divChangeVal_5(ParserData& parserData, ParserBranch& branch);
    void h_intDivChangeVal_1(ParserData& parserData, ParserBranch& branch);
    void h_intDivChangeVal_2(ParserData& parserData, ParserBranch& branch);
    void h_intDivChangeVal_3(ParserData& parserData, ParserBranch& branch);
    void h_intDivChangeVal_4(ParserData& parserData, ParserBranch& branch);
    void h_intDivChangeVal_5(ParserData& parserData, ParserBranch& branch);
    void h_modChangeVal_1(ParserData& parserData, ParserBranch& branch);
    void h_modChangeVal_2(ParserData& parserData, ParserBranch& branch);
    void h_modChangeVal_3(ParserData& parserData, ParserBranch& branch);
    void h_modChangeVal_4(ParserData& parserData, ParserBranch& branch);
    void h_modChangeVal_5(ParserData& parserData, ParserBranch& branch);
    void h_shiftRChangeVal_1(ParserData& parserData, ParserBranch& branch);
    void h_shiftRChangeVal_2(ParserData& parserData, ParserBranch& branch);
    void h_shiftRChangeVal_3(ParserData& parserData, ParserBranch& branch);
    void h_shiftRChangeVal_4(ParserData& parserData, ParserBranch& branch);
    void h_shiftRChangeVal_5(ParserData& parserData, ParserBranch& branch);
    void h_shiftLChangeVal_1(ParserData& parserData, ParserBranch& branch);
    void h_shiftLChangeVal_2(ParserData& parserData, ParserBranch& branch);
    void h_shiftLChangeVal_3(ParserData& parserData, ParserBranch& branch);
    void h_shiftLChangeVal_4(ParserData& parserData, ParserBranch& branch);
    void h_shiftLChangeVal_5(ParserData& parserData, ParserBranch& branch);
    void h_andChangeVal_1(ParserData& parserData, ParserBranch& branch);
    void h_andChangeVal_2(ParserData& parserData, ParserBranch& branch);
    void h_andChangeVal_3(ParserData& parserData, ParserBranch& branch);
    void h_andChangeVal_4(ParserData& parserData, ParserBranch& branch);
    void h_andChangeVal_5(ParserData& parserData, ParserBranch& branch);
    void h_orChangeVal_1(ParserData& parserData, ParserBranch& branch);
    void h_orChangeVal_2(ParserData& parserData, ParserBranch& branch);
    void h_orChangeVal_3(ParserData& parserData, ParserBranch& branch);
    void h_orChangeVal_4(ParserData& parserData, ParserBranch& branch);
    void h_orChangeVal_5(ParserData& parserData, ParserBranch& branch);
    void h_xorChangeVal_1(ParserData& parserData, ParserBranch& branch);
    void h_xorChangeVal_2(ParserData& parserData, ParserBranch& branch);
    void h_xorChangeVal_3(ParserData& parserData, ParserBranch& branch);
    void h_xorChangeVal_4(ParserData& parserData, ParserBranch& branch);
    void h_xorChangeVal_5(ParserData& parserData, ParserBranch& branch);

    // file = _ <:contextBody>
    void h_file_1(ParserData& parserData, ParserBranch& branch) {
    }

    // ONL = _ '\n'*
    void h_ONL_1(ParserData& parserData, ParserBranch& branch) {
    }

    // contextBody = _ ( <descs:contextDescriptionEntry> | '\n')*
    void h_contextBody_1(ParserData& parserData, ParserBranch& branch) {
    }

    // contextBody = ( _ <descs:contextDescriptionEntry> | '\n')*
    void h_contextBody_2(ParserData& parserData, ParserBranch& branch) {
    }

    // contextBody = ( <descs:contextDescriptionEntry> | _ '\n')*
    void h_contextBody_3(ParserData& parserData, ParserBranch& branch) {
    }

    // contextBodyClosedBlock 	= _ <descs:contextDescriptionEntry>
    void h_contextBodyClosedBlock_1(ParserData& parserData, ParserBranch& branch) {
    }

    // contextBodyClosedBlock = _ '\n' <:contextBody> 'ok'
    void h_contextBodyClosedBlock_2(ParserData& parserData, ParserBranch& branch) {
    }

    // contextBodyClosedBlock = '\n' _ <:contextBody> 'ok'
    void h_contextBodyClosedBlock_3(ParserData& parserData, ParserBranch& branch) {
    }

    // contextBodyClosedBlock = '\n' <:contextBody> _ 'ok'
    void h_contextBodyClosedBlock_4(ParserData& parserData, ParserBranch& branch) {
    }

    // contextDescriptionEntry = _ <statement> '\n'
    void h_contextDescriptionEntry_1(ParserData& parserData, ParserBranch& branch) {
    }

    // contextDescriptionEntry = <statement> _ '\n'
    void h_contextDescriptionEntry_2(ParserData& parserData, ParserBranch& branch) {
    }

    // contextDescriptionEntry = _ <traitAssertion> '\n'
    void h_contextDescriptionEntry_3(ParserData& parserData, ParserBranch& branch) {
    }

    // contextDescriptionEntry = <traitAssertion> _ '\n'
    void h_contextDescriptionEntry_4(ParserData& parserData, ParserBranch& branch) {
    }

    // traitAssertion = _ '??' <cond:expression>
    void h_traitAssertion_1(ParserData& parserData, ParserBranch& branch) {
    }

    // traitAssertion = '??' _ <cond:expression>
    void h_traitAssertion_2(ParserData& parserData, ParserBranch& branch) {
    }

    // expression = _ <exprLeast>
    void h_expression_1(ParserData& parserData, ParserBranch& branch) {
    }

    // expr0 	= _ <identifier>
    void h_expr0_1(ParserData& parserData, ParserBranch& branch) {
    }

    // expr0 = _ '(' <ONL> <expression> ')' <ONL>
    void h_expr0_2(ParserData& parserData, ParserBranch& branch) {
    }

    // expr0 = '(' _ <ONL> <expression> ')' <ONL>
    void h_expr0_3(ParserData& parserData, ParserBranch& branch) {
    }

    // expr0 = '(' <ONL> _ <expression> ')' <ONL>
    void h_expr0_4(ParserData& parserData, ParserBranch& branch) {
    }

    // expr0 = '(' <ONL> <expression> _ ')' <ONL>
    void h_expr0_5(ParserData& parserData, ParserBranch& branch) {
    }

    // expr0 = '(' <ONL> <expression> ')' _ <ONL>
    void h_expr0_6(ParserData& parserData, ParserBranch& branch) {
    }

    // expr0 = _ <literal>
    void h_expr0_7(ParserData& parserData, ParserBranch& branch) {
    }

    // identifier = _ name:L_IDENTIFIER
    void h_identifier_1(ParserData& parserData, ParserBranch& branch) {
    }

    // suffixFunction = _ <left:expr1> '.' <ONL> <right:expr0>
    void h_suffixFunction_1(ParserData& parserData, ParserBranch& branch) {
    }

    // suffixFunction = <left:expr1> _ '.' <ONL> <right:expr0>
    void h_suffixFunction_2(ParserData& parserData, ParserBranch& branch) {
    }

    // suffixFunction = <left:expr1> '.' _ <ONL> <right:expr0>
    void h_suffixFunction_3(ParserData& parserData, ParserBranch& branch) {
    }

    // suffixFunction = <left:expr1> '.' <ONL> _ <right:expr0>
    void h_suffixFunction_4(ParserData& parserData, ParserBranch& branch) {
    }

    // expr1 = _ <expr0>
    void h_expr1_1(ParserData& parserData, ParserBranch& branch) {
    }

    // expr1 = _ <suffixFunction>
    void h_expr1_2(ParserData& parserData, ParserBranch& branch) {
    }

    // suffixInc = _ <val:expr2> '++'
    void h_suffixInc_1(ParserData& parserData, ParserBranch& branch) {
    }

    // suffixInc = <val:expr2> _ '++'
    void h_suffixInc_2(ParserData& parserData, ParserBranch& branch) {
    }

    // suffixDec = _ <val:expr2> '--'
    void h_suffixDec_1(ParserData& parserData, ParserBranch& branch) {
    }

    // suffixDec = <val:expr2> _ '--'
    void h_suffixDec_2(ParserData& parserData, ParserBranch& branch) {
    }

    // copy = _ 'new' <ONL> <val:expr2>
    void h_copy_1(ParserData& parserData, ParserBranch& branch) {
    }

    // copy = 'new' _ <ONL> <val:expr2>
    void h_copy_2(ParserData& parserData, ParserBranch& branch) {
    }

    // copy = 'new' <ONL> _ <val:expr2>
    void h_copy_3(ParserData& parserData, ParserBranch& branch) {
    }

    // prefixFunction = _ <left:expr1> <right:expr2>
    void h_prefixFunction_1(ParserData& parserData, ParserBranch& branch) {
    }

    // prefixFunction = <left:expr1> _ <right:expr2>
    void h_prefixFunction_2(ParserData& parserData, ParserBranch& branch) {
    }

    // expr2 = _ <expr1>
    void h_expr2_1(ParserData& parserData, ParserBranch& branch) {
    }

    // expr2 = _ <suffixInc>
    void h_expr2_2(ParserData& parserData, ParserBranch& branch) {
    }

    // expr2 = _ <suffixDec>
    void h_expr2_3(ParserData& parserData, ParserBranch& branch) {
    }

    // expr2 = _ <copy>
    void h_expr2_4(ParserData& parserData, ParserBranch& branch) {
    }

    // expr2 = _ <prefixFunction>
    void h_expr2_5(ParserData& parserData, ParserBranch& branch) {
    }

    // prefixInc = _ '++' <ONL> <val:expr3>
    void h_prefixInc_1(ParserData& parserData, ParserBranch& branch) {
    }

    // prefixInc = '++' _ <ONL> <val:expr3>
    void h_prefixInc_2(ParserData& parserData, ParserBranch& branch) {
    }

    // prefixInc = '++' <ONL> _ <val:expr3>
    void h_prefixInc_3(ParserData& parserData, ParserBranch& branch) {
    }

    // prefixDec = _ '--' <ONL> <val:expr3>
    void h_prefixDec_1(ParserData& parserData, ParserBranch& branch) {
    }

    // prefixDec = '--' _ <ONL> <val:expr3>
    void h_prefixDec_2(ParserData& parserData, ParserBranch& branch) {
    }

    // prefixDec = '--' <ONL> _ <val:expr3>
    void h_prefixDec_3(ParserData& parserData, ParserBranch& branch) {
    }

    // plus = _ '+' <ONL> <val:expr3>
    void h_plus_1(ParserData& parserData, ParserBranch& branch) {
    }

    // plus = '+' _ <ONL> <val:expr3>
    void h_plus_2(ParserData& parserData, ParserBranch& branch) {
    }

    // plus = '+' <ONL> _ <val:expr3>
    void h_plus_3(ParserData& parserData, ParserBranch& branch) {
    }

    // minus = _ '-' <ONL> <val:expr3>
    void h_minus_1(ParserData& parserData, ParserBranch& branch) {
    }

    // minus = '-' _ <ONL> <val:expr3>
    void h_minus_2(ParserData& parserData, ParserBranch& branch) {
    }

    // minus = '-' <ONL> _ <val:expr3>
    void h_minus_3(ParserData& parserData, ParserBranch& branch) {
    }

    // logNot = _ '!' <ONL> <val:expr3>
    void h_logNot_1(ParserData& parserData, ParserBranch& branch) {
    }

    // logNot = '!' _ <ONL> <val:expr3>
    void h_logNot_2(ParserData& parserData, ParserBranch& branch) {
    }

    // logNot = '!' <ONL> _ <val:expr3>
    void h_logNot_3(ParserData& parserData, ParserBranch& branch) {
    }

    // expr3 = _ <expr2>
    void h_expr3_1(ParserData& parserData, ParserBranch& branch) {
    }

    // expr3 = _ <prefixInc>
    void h_expr3_2(ParserData& parserData, ParserBranch& branch) {
    }

    // expr3 = _ <prefixDec>
    void h_expr3_3(ParserData& parserData, ParserBranch& branch) {
    }

    // expr3 = _ <plus>
    void h_expr3_4(ParserData& parserData, ParserBranch& branch) {
    }

    // expr3 = _ <minus>
    void h_expr3_5(ParserData& parserData, ParserBranch& branch) {
    }

    // expr3 = _ <logNot>
    void h_expr3_6(ParserData& parserData, ParserBranch& branch) {
    }

    // multiplication = _ <left:expr4> '*' <ONL> <right:expr3>
    void h_multiplication_1(ParserData& parserData, ParserBranch& branch) {
    }

    // multiplication = <left:expr4> _ '*' <ONL> <right:expr3>
    void h_multiplication_2(ParserData& parserData, ParserBranch& branch) {
    }

    // multiplication = <left:expr4> '*' _ <ONL> <right:expr3>
    void h_multiplication_3(ParserData& parserData, ParserBranch& branch) {
    }

    // multiplication = <left:expr4> '*' <ONL> _ <right:expr3>
    void h_multiplication_4(ParserData& parserData, ParserBranch& branch) {
    }

    // crossProduct = _ <left:expr4> '×' <ONL> <right:expr3>
    void h_crossProduct_1(ParserData& parserData, ParserBranch& branch) {
    }

    // crossProduct = <left:expr4> _ '×' <ONL> <right:expr3>
    void h_crossProduct_2(ParserData& parserData, ParserBranch& branch) {
    }

    // crossProduct = <left:expr4> '×' _ <ONL> <right:expr3>
    void h_crossProduct_3(ParserData& parserData, ParserBranch& branch) {
    }

    // crossProduct = <left:expr4> '×' <ONL> _ <right:expr3>
    void h_crossProduct_4(ParserData& parserData, ParserBranch& branch) {
    }

    // dotProduct = _ <left:expr4> '⋅' <ONL> <right:expr3>
    void h_dotProduct_1(ParserData& parserData, ParserBranch& branch) {
    }

    // dotProduct = <left:expr4> _ '⋅' <ONL> <right:expr3>
    void h_dotProduct_2(ParserData& parserData, ParserBranch& branch) {
    }

    // dotProduct = <left:expr4> '⋅' _ <ONL> <right:expr3>
    void h_dotProduct_3(ParserData& parserData, ParserBranch& branch) {
    }

    // dotProduct = <left:expr4> '⋅' <ONL> _ <right:expr3>
    void h_dotProduct_4(ParserData& parserData, ParserBranch& branch) {
    }

    // division = _ <left:expr4> '/' <ONL> <right:expr3>
    void h_division_1(ParserData& parserData, ParserBranch& branch) {
    }

    // division = <left:expr4> _ '/' <ONL> <right:expr3>
    void h_division_2(ParserData& parserData, ParserBranch& branch) {
    }

    // division = <left:expr4> '/' _ <ONL> <right:expr3>
    void h_division_3(ParserData& parserData, ParserBranch& branch) {
    }

    // division = <left:expr4> '/' <ONL> _ <right:expr3>
    void h_division_4(ParserData& parserData, ParserBranch& branch) {
    }

    // divisionInt = _ <left:expr4> '/%' <ONL> <right:expr3>
    void h_divisionInt_1(ParserData& parserData, ParserBranch& branch) {
    }

    // divisionInt = <left:expr4> _ '/%' <ONL> <right:expr3>
    void h_divisionInt_2(ParserData& parserData, ParserBranch& branch) {
    }

    // divisionInt = <left:expr4> '/%' _ <ONL> <right:expr3>
    void h_divisionInt_3(ParserData& parserData, ParserBranch& branch) {
    }

    // divisionInt = <left:expr4> '/%' <ONL> _ <right:expr3>
    void h_divisionInt_4(ParserData& parserData, ParserBranch& branch) {
    }

    // modulo = _ <left:expr4> '%' <ONL> <right:expr3>
    void h_modulo_1(ParserData& parserData, ParserBranch& branch) {
    }

    // modulo = <left:expr4> _ '%' <ONL> <right:expr3>
    void h_modulo_2(ParserData& parserData, ParserBranch& branch) {
    }

    // modulo = <left:expr4> '%' _ <ONL> <right:expr3>
    void h_modulo_3(ParserData& parserData, ParserBranch& branch) {
    }

    // modulo = <left:expr4> '%' <ONL> _ <right:expr3>
    void h_modulo_4(ParserData& parserData, ParserBranch& branch) {
    }

    // expr4 = _ <expr3>
    void h_expr4_1(ParserData& parserData, ParserBranch& branch) {
    }

    // expr4 = _ <multiplication>
    void h_expr4_2(ParserData& parserData, ParserBranch& branch) {
    }

    // expr4 = _ <crossProduct>
    void h_expr4_3(ParserData& parserData, ParserBranch& branch) {
    }

    // expr4 = _ <dotProduct>
    void h_expr4_4(ParserData& parserData, ParserBranch& branch) {
    }

    // expr4 = _ <division>
    void h_expr4_5(ParserData& parserData, ParserBranch& branch) {
    }

    // expr4 = _ <divisionInt>
    void h_expr4_6(ParserData& parserData, ParserBranch& branch) {
    }

    // expr4 = _ <modulo>
    void h_expr4_7(ParserData& parserData, ParserBranch& branch) {
    }

    // addition = _ <left:expr5> '+' <ONL> <right:expr4>
    void h_addition_1(ParserData& parserData, ParserBranch& branch) {
    }

    // addition = <left:expr5> _ '+' <ONL> <right:expr4>
    void h_addition_2(ParserData& parserData, ParserBranch& branch) {
    }

    // addition = <left:expr5> '+' _ <ONL> <right:expr4>
    void h_addition_3(ParserData& parserData, ParserBranch& branch) {
    }

    // addition = <left:expr5> '+' <ONL> _ <right:expr4>
    void h_addition_4(ParserData& parserData, ParserBranch& branch) {
    }

    // subtraction = _ <left:expr5> '-' <ONL> <right:expr4>
    void h_subtraction_1(ParserData& parserData, ParserBranch& branch) {
    }

    // subtraction = <left:expr5> _ '-' <ONL> <right:expr4>
    void h_subtraction_2(ParserData& parserData, ParserBranch& branch) {
    }

    // subtraction = <left:expr5> '-' _ <ONL> <right:expr4>
    void h_subtraction_3(ParserData& parserData, ParserBranch& branch) {
    }

    // subtraction = <left:expr5> '-' <ONL> _ <right:expr4>
    void h_subtraction_4(ParserData& parserData, ParserBranch& branch) {
    }

    // expr5 = _ <expr4>
    void h_expr5_1(ParserData& parserData, ParserBranch& branch) {
    }

    // expr5 = _ <addition>
    void h_expr5_2(ParserData& parserData, ParserBranch& branch) {
    }

    // expr5 = _ <subtraction>
    void h_expr5_3(ParserData& parserData, ParserBranch& branch) {
    }

    // shiftL = _ <left:expr6> '<<' <ONL> <right:expr5>
    void h_shiftL_1(ParserData& parserData, ParserBranch& branch) {
    }

    // shiftL = <left:expr6> _ '<<' <ONL> <right:expr5>
    void h_shiftL_2(ParserData& parserData, ParserBranch& branch) {
    }

    // shiftL = <left:expr6> '<<' _ <ONL> <right:expr5>
    void h_shiftL_3(ParserData& parserData, ParserBranch& branch) {
    }

    // shiftL = <left:expr6> '<<' <ONL> _ <right:expr5>
    void h_shiftL_4(ParserData& parserData, ParserBranch& branch) {
    }

    // shiftR = _ <left:expr6> '>>' <ONL> <right:expr5>
    void h_shiftR_1(ParserData& parserData, ParserBranch& branch) {
    }

    // shiftR = <left:expr6> _ '>>' <ONL> <right:expr5>
    void h_shiftR_2(ParserData& parserData, ParserBranch& branch) {
    }

    // shiftR = <left:expr6> '>>' _ <ONL> <right:expr5>
    void h_shiftR_3(ParserData& parserData, ParserBranch& branch) {
    }

    // shiftR = <left:expr6> '>>' <ONL> _ <right:expr5>
    void h_shiftR_4(ParserData& parserData, ParserBranch& branch) {
    }

    // expr6 = _ <expr5>
    void h_expr6_1(ParserData& parserData, ParserBranch& branch) {
    }

    // expr6 = _ <shiftL>
    void h_expr6_2(ParserData& parserData, ParserBranch& branch) {
    }

    // expr6 = _ <shiftR>
    void h_expr6_3(ParserData& parserData, ParserBranch& branch) {
    }

    // compLess = _ <left:expr7> '<' <ONL> <right:expr6>
    void h_compLess_1(ParserData& parserData, ParserBranch& branch) {
    }

    // compLess = <left:expr7> _ '<' <ONL> <right:expr6>
    void h_compLess_2(ParserData& parserData, ParserBranch& branch) {
    }

    // compLess = <left:expr7> '<' _ <ONL> <right:expr6>
    void h_compLess_3(ParserData& parserData, ParserBranch& branch) {
    }

    // compLess = <left:expr7> '<' <ONL> _ <right:expr6>
    void h_compLess_4(ParserData& parserData, ParserBranch& branch) {
    }

    // compGreat = _ <left:expr7> '>' <ONL> <right:expr6>
    void h_compGreat_1(ParserData& parserData, ParserBranch& branch) {
    }

    // compGreat = <left:expr7> _ '>' <ONL> <right:expr6>
    void h_compGreat_2(ParserData& parserData, ParserBranch& branch) {
    }

    // compGreat = <left:expr7> '>' _ <ONL> <right:expr6>
    void h_compGreat_3(ParserData& parserData, ParserBranch& branch) {
    }

    // compGreat = <left:expr7> '>' <ONL> _ <right:expr6>
    void h_compGreat_4(ParserData& parserData, ParserBranch& branch) {
    }

    // compLeEq = _ <left:expr7> '<=' <ONL> <right:expr6>
    void h_compLeEq_1(ParserData& parserData, ParserBranch& branch) {
    }

    // compLeEq = <left:expr7> _ '<=' <ONL> <right:expr6>
    void h_compLeEq_2(ParserData& parserData, ParserBranch& branch) {
    }

    // compLeEq = <left:expr7> '<=' _ <ONL> <right:expr6>
    void h_compLeEq_3(ParserData& parserData, ParserBranch& branch) {
    }

    // compLeEq = <left:expr7> '<=' <ONL> _ <right:expr6>
    void h_compLeEq_4(ParserData& parserData, ParserBranch& branch) {
    }

    // compGrEq = _ <left:expr7> '>=' <ONL> <right:expr6>
    void h_compGrEq_1(ParserData& parserData, ParserBranch& branch) {
    }

    // compGrEq = <left:expr7> _ '>=' <ONL> <right:expr6>
    void h_compGrEq_2(ParserData& parserData, ParserBranch& branch) {
    }

    // compGrEq = <left:expr7> '>=' _ <ONL> <right:expr6>
    void h_compGrEq_3(ParserData& parserData, ParserBranch& branch) {
    }

    // compGrEq = <left:expr7> '>=' <ONL> _ <right:expr6>
    void h_compGrEq_4(ParserData& parserData, ParserBranch& branch) {
    }

    // expr7 = _ <expr6>
    void h_expr7_1(ParserData& parserData, ParserBranch& branch) {
    }

    // expr7 = _ <compLess>
    void h_expr7_2(ParserData& parserData, ParserBranch& branch) {
    }

    // expr7 = _ <compGreat>
    void h_expr7_3(ParserData& parserData, ParserBranch& branch) {
    }

    // expr7 = _ <compLeEq>
    void h_expr7_4(ParserData& parserData, ParserBranch& branch) {
    }

    // expr7 = _ <compGrEq>
    void h_expr7_5(ParserData& parserData, ParserBranch& branch) {
    }

    // compEqual = _ <left:expr8> '?=' <ONL> <right:expr7>
    void h_compEqual_1(ParserData& parserData, ParserBranch& branch) {
    }

    // compEqual = <left:expr8> _ '?=' <ONL> <right:expr7>
    void h_compEqual_2(ParserData& parserData, ParserBranch& branch) {
    }

    // compEqual = <left:expr8> '?=' _ <ONL> <right:expr7>
    void h_compEqual_3(ParserData& parserData, ParserBranch& branch) {
    }

    // compEqual = <left:expr8> '?=' <ONL> _ <right:expr7>
    void h_compEqual_4(ParserData& parserData, ParserBranch& branch) {
    }

    // compNotEq = _ <left:expr8> '!=' <ONL> <right:expr7>
    void h_compNotEq_1(ParserData& parserData, ParserBranch& branch) {
    }

    // compNotEq = <left:expr8> _ '!=' <ONL> <right:expr7>
    void h_compNotEq_2(ParserData& parserData, ParserBranch& branch) {
    }

    // compNotEq = <left:expr8> '!=' _ <ONL> <right:expr7>
    void h_compNotEq_3(ParserData& parserData, ParserBranch& branch) {
    }

    // compNotEq = <left:expr8> '!=' <ONL> _ <right:expr7>
    void h_compNotEq_4(ParserData& parserData, ParserBranch& branch) {
    }

    // compAssigned = _ <left:expr8> '?->' <ONL> <right:expr7>
    void h_compAssigned_1(ParserData& parserData, ParserBranch& branch) {
    }

    // compAssigned = <left:expr8> _ '?->' <ONL> <right:expr7>
    void h_compAssigned_2(ParserData& parserData, ParserBranch& branch) {
    }

    // compAssigned = <left:expr8> '?->' _ <ONL> <right:expr7>
    void h_compAssigned_3(ParserData& parserData, ParserBranch& branch) {
    }

    // compAssigned = <left:expr8> '?->' <ONL> _ <right:expr7>
    void h_compAssigned_4(ParserData& parserData, ParserBranch& branch) {
    }

    // compNotAss = _ <left:expr8> '!->' <ONL> <right:expr7>
    void h_compNotAss_1(ParserData& parserData, ParserBranch& branch) {
    }

    // compNotAss = <left:expr8> _ '!->' <ONL> <right:expr7>
    void h_compNotAss_2(ParserData& parserData, ParserBranch& branch) {
    }

    // compNotAss = <left:expr8> '!->' _ <ONL> <right:expr7>
    void h_compNotAss_3(ParserData& parserData, ParserBranch& branch) {
    }

    // compNotAss = <left:expr8> '!->' <ONL> _ <right:expr7>
    void h_compNotAss_4(ParserData& parserData, ParserBranch& branch) {
    }

    // expr8 = _ <expr7>
    void h_expr8_1(ParserData& parserData, ParserBranch& branch) {
    }

    // expr8 = _ <compEqual>
    void h_expr8_2(ParserData& parserData, ParserBranch& branch) {
    }

    // expr8 = _ <compNotEq>
    void h_expr8_3(ParserData& parserData, ParserBranch& branch) {
    }

    // expr8 = _ <compAssigned>
    void h_expr8_4(ParserData& parserData, ParserBranch& branch) {
    }

    // expr8 = _ <compNotAss>
    void h_expr8_5(ParserData& parserData, ParserBranch& branch) {
    }

    // logAnd = _ <left:expr9> '&' <ONL> <right:expr8>
    void h_logAnd_1(ParserData& parserData, ParserBranch& branch) {
    }

    // logAnd = <left:expr9> _ '&' <ONL> <right:expr8>
    void h_logAnd_2(ParserData& parserData, ParserBranch& branch) {
    }

    // logAnd = <left:expr9> '&' _ <ONL> <right:expr8>
    void h_logAnd_3(ParserData& parserData, ParserBranch& branch) {
    }

    // logAnd = <left:expr9> '&' <ONL> _ <right:expr8>
    void h_logAnd_4(ParserData& parserData, ParserBranch& branch) {
    }

    // expr9 = _ <expr8>
    void h_expr9_1(ParserData& parserData, ParserBranch& branch) {
    }

    // expr9 = _ <logAnd>
    void h_expr9_2(ParserData& parserData, ParserBranch& branch) {
    }

    // logXOr = _ <left:expr10> '^' <ONL> <right:expr9>
    void h_logXOr_1(ParserData& parserData, ParserBranch& branch) {
    }

    // logXOr = <left:expr10> _ '^' <ONL> <right:expr9>
    void h_logXOr_2(ParserData& parserData, ParserBranch& branch) {
    }

    // logXOr = <left:expr10> '^' _ <ONL> <right:expr9>
    void h_logXOr_3(ParserData& parserData, ParserBranch& branch) {
    }

    // logXOr = <left:expr10> '^' <ONL> _ <right:expr9>
    void h_logXOr_4(ParserData& parserData, ParserBranch& branch) {
    }

    // expr10 = _ <expr9>
    void h_expr10_1(ParserData& parserData, ParserBranch& branch) {
    }

    // expr10 = _ <logXOr>
    void h_expr10_2(ParserData& parserData, ParserBranch& branch) {
    }

    // logOr = _ <left:exprLeast> '|' <ONL> <right:expr10>
    void h_logOr_1(ParserData& parserData, ParserBranch& branch) {
    }

    // logOr = <left:exprLeast> _ '|' <ONL> <right:expr10>
    void h_logOr_2(ParserData& parserData, ParserBranch& branch) {
    }

    // logOr = <left:exprLeast> '|' _ <ONL> <right:expr10>
    void h_logOr_3(ParserData& parserData, ParserBranch& branch) {
    }

    // logOr = <left:exprLeast> '|' <ONL> _ <right:expr10>
    void h_logOr_4(ParserData& parserData, ParserBranch& branch) {
    }

    // exprLeast = _ <expr10>
    void h_exprLeast_1(ParserData& parserData, ParserBranch& branch) {
    }

    // exprLeast = _ <logOr>
    void h_exprLeast_2(ParserData& parserData, ParserBranch& branch) {
    }

    // literal 	= _ <contextLiteral>
    void h_literal_1(ParserData& parserData, ParserBranch& branch) {
    }

    // literal = _ <valueLiteral>
    void h_literal_2(ParserData& parserData, ParserBranch& branch) {
    }

    // literal = _ <listLiteral>
    void h_literal_3(ParserData& parserData, ParserBranch& branch) {
    }

    // literal = _ <setLiteral>
    void h_literal_4(ParserData& parserData, ParserBranch& branch) {
    }

    // literal = _ <dictLiteral>
    void h_literal_5(ParserData& parserData, ParserBranch& branch) {
    }

    // valueLiteral 	= _ num:L_NUM_LIT [ suf:L_LIT_SUFFIX ]
    void h_valueLiteral_1(ParserData& parserData, ParserBranch& branch) {
    }

    // valueLiteral 	= num:L_NUM_LIT _ [ suf:L_LIT_SUFFIX ]
    void h_valueLiteral_2(ParserData& parserData, ParserBranch& branch) {
    }

    // valueLiteral 	= num:L_NUM_LIT [ _ suf:L_LIT_SUFFIX ]
    void h_valueLiteral_3(ParserData& parserData, ParserBranch& branch) {
    }

    // valueLiteral = _ str:L_NUM_B_LIT [ suf:L_LIT_SUFFIX ]
    void h_valueLiteral_4(ParserData& parserData, ParserBranch& branch) {
    }

    // valueLiteral = str:L_NUM_B_LIT _ [ suf:L_LIT_SUFFIX ]
    void h_valueLiteral_5(ParserData& parserData, ParserBranch& branch) {
    }

    // valueLiteral = str:L_NUM_B_LIT [ _ suf:L_LIT_SUFFIX ]
    void h_valueLiteral_6(ParserData& parserData, ParserBranch& branch) {
    }

    // valueLiteral = _ str:L_NUM_O_LIT [ suf:L_LIT_SUFFIX ]
    void h_valueLiteral_7(ParserData& parserData, ParserBranch& branch) {
    }

    // valueLiteral = str:L_NUM_O_LIT _ [ suf:L_LIT_SUFFIX ]
    void h_valueLiteral_8(ParserData& parserData, ParserBranch& branch) {
    }

    // valueLiteral = str:L_NUM_O_LIT [ _ suf:L_LIT_SUFFIX ]
    void h_valueLiteral_9(ParserData& parserData, ParserBranch& branch) {
    }

    // valueLiteral = _ str:L_NUM_X_LIT [ suf:L_LIT_SUFFIX ]
    void h_valueLiteral_10(ParserData& parserData, ParserBranch& branch) {
    }

    // valueLiteral = str:L_NUM_X_LIT _ [ suf:L_LIT_SUFFIX ]
    void h_valueLiteral_11(ParserData& parserData, ParserBranch& branch) {
    }

    // valueLiteral = str:L_NUM_X_LIT [ _ suf:L_LIT_SUFFIX ]
    void h_valueLiteral_12(ParserData& parserData, ParserBranch& branch) {
    }

    // valueLiteral = _ str:L_STR_LIT [ suf:L_LIT_SUFFIX ]
    void h_valueLiteral_13(ParserData& parserData, ParserBranch& branch) {
    }

    // valueLiteral = str:L_STR_LIT _ [ suf:L_LIT_SUFFIX ]
    void h_valueLiteral_14(ParserData& parserData, ParserBranch& branch) {
    }

    // valueLiteral = str:L_STR_LIT [ _ suf:L_LIT_SUFFIX ]
    void h_valueLiteral_15(ParserData& parserData, ParserBranch& branch) {
    }

    // listLiteral = _ '[' <items:expression> (',' <items:expression>)* ']'
    void h_listLiteral_1(ParserData& parserData, ParserBranch& branch) {
    }

    // listLiteral = '[' _ <items:expression> (',' <items:expression>)* ']'
    void h_listLiteral_2(ParserData& parserData, ParserBranch& branch) {
    }

    // listLiteral = '[' <items:expression> _ (',' <items:expression>)* ']'
    void h_listLiteral_3(ParserData& parserData, ParserBranch& branch) {
    }

    // listLiteral = '[' <items:expression> (_ ',' <items:expression>)* ']'
    void h_listLiteral_4(ParserData& parserData, ParserBranch& branch) {
    }

    // listLiteral = '[' <items:expression> (',' _ <items:expression>)* ']'
    void h_listLiteral_5(ParserData& parserData, ParserBranch& branch) {
    }

    // listLiteral = '[' <items:expression> (',' <items:expression>)* _ ']'
    void h_listLiteral_6(ParserData& parserData, ParserBranch& branch) {
    }

    // listLiteral = _ '[' <ONL> <items:expression> ',' (<ONL> <items:expression> ',')* <ONL> ']'
    void h_listLiteral_7(ParserData& parserData, ParserBranch& branch) {
    }

    // listLiteral = '[' _ <ONL> <items:expression> ',' (<ONL> <items:expression> ',')* <ONL> ']'
    void h_listLiteral_8(ParserData& parserData, ParserBranch& branch) {
    }

    // listLiteral = '[' <ONL> _ <items:expression> ',' (<ONL> <items:expression> ',')* <ONL> ']'
    void h_listLiteral_9(ParserData& parserData, ParserBranch& branch) {
    }

    // listLiteral = '[' <ONL> <items:expression> _ ',' (<ONL> <items:expression> ',')* <ONL> ']'
    void h_listLiteral_10(ParserData& parserData, ParserBranch& branch) {
    }

    // listLiteral = '[' <ONL> <items:expression> ',' _ (<ONL> <items:expression> ',')* <ONL> ']'
    void h_listLiteral_11(ParserData& parserData, ParserBranch& branch) {
    }

    // listLiteral = '[' <ONL> <items:expression> ',' (_ <ONL> <items:expression> ',')* <ONL> ']'
    void h_listLiteral_12(ParserData& parserData, ParserBranch& branch) {
    }

    // listLiteral = '[' <ONL> <items:expression> ',' (<ONL> _ <items:expression> ',')* <ONL> ']'
    void h_listLiteral_13(ParserData& parserData, ParserBranch& branch) {
    }

    // listLiteral = '[' <ONL> <items:expression> ',' (<ONL> <items:expression> _ ',')* <ONL> ']'
    void h_listLiteral_14(ParserData& parserData, ParserBranch& branch) {
    }

    // listLiteral = '[' <ONL> <items:expression> ',' (<ONL> <items:expression> ',')* _ <ONL> ']'
    void h_listLiteral_15(ParserData& parserData, ParserBranch& branch) {
    }

    // listLiteral = '[' <ONL> <items:expression> ',' (<ONL> <items:expression> ',')* <ONL> _ ']'
    void h_listLiteral_16(ParserData& parserData, ParserBranch& branch) {
    }

    // setLiteral 	= _ '{' <items:expression> (',' <items:expression>)* '}'
    void h_setLiteral_1(ParserData& parserData, ParserBranch& branch) {
    }

    // setLiteral 	= '{' _ <items:expression> (',' <items:expression>)* '}'
    void h_setLiteral_2(ParserData& parserData, ParserBranch& branch) {
    }

    // setLiteral 	= '{' <items:expression> _ (',' <items:expression>)* '}'
    void h_setLiteral_3(ParserData& parserData, ParserBranch& branch) {
    }

    // setLiteral 	= '{' <items:expression> (_ ',' <items:expression>)* '}'
    void h_setLiteral_4(ParserData& parserData, ParserBranch& branch) {
    }

    // setLiteral 	= '{' <items:expression> (',' _ <items:expression>)* '}'
    void h_setLiteral_5(ParserData& parserData, ParserBranch& branch) {
    }

    // setLiteral 	= '{' <items:expression> (',' <items:expression>)* _ '}'
    void h_setLiteral_6(ParserData& parserData, ParserBranch& branch) {
    }

    // setLiteral = _ '{' <ONL> <items:expression> ',' (<ONL> <items:expression> ',')* <ONL> '}'
    void h_setLiteral_7(ParserData& parserData, ParserBranch& branch) {
    }

    // setLiteral = '{' _ <ONL> <items:expression> ',' (<ONL> <items:expression> ',')* <ONL> '}'
    void h_setLiteral_8(ParserData& parserData, ParserBranch& branch) {
    }

    // setLiteral = '{' <ONL> _ <items:expression> ',' (<ONL> <items:expression> ',')* <ONL> '}'
    void h_setLiteral_9(ParserData& parserData, ParserBranch& branch) {
    }

    // setLiteral = '{' <ONL> <items:expression> _ ',' (<ONL> <items:expression> ',')* <ONL> '}'
    void h_setLiteral_10(ParserData& parserData, ParserBranch& branch) {
    }

    // setLiteral = '{' <ONL> <items:expression> ',' _ (<ONL> <items:expression> ',')* <ONL> '}'
    void h_setLiteral_11(ParserData& parserData, ParserBranch& branch) {
    }

    // setLiteral = '{' <ONL> <items:expression> ',' (_ <ONL> <items:expression> ',')* <ONL> '}'
    void h_setLiteral_12(ParserData& parserData, ParserBranch& branch) {
    }

    // setLiteral = '{' <ONL> <items:expression> ',' (<ONL> _ <items:expression> ',')* <ONL> '}'
    void h_setLiteral_13(ParserData& parserData, ParserBranch& branch) {
    }

    // setLiteral = '{' <ONL> <items:expression> ',' (<ONL> <items:expression> _ ',')* <ONL> '}'
    void h_setLiteral_14(ParserData& parserData, ParserBranch& branch) {
    }

    // setLiteral = '{' <ONL> <items:expression> ',' (<ONL> <items:expression> ',')* _ <ONL> '}'
    void h_setLiteral_15(ParserData& parserData, ParserBranch& branch) {
    }

    // setLiteral = '{' <ONL> <items:expression> ',' (<ONL> <items:expression> ',')* <ONL> _ '}'
    void h_setLiteral_16(ParserData& parserData, ParserBranch& branch) {
    }

    // dictLiteral = _ '{' ':' <items:dictEntry> (',' <items:dictEntry>)* '}'
    void h_dictLiteral_1(ParserData& parserData, ParserBranch& branch) {
    }

    // dictLiteral = '{' _ ':' <items:dictEntry> (',' <items:dictEntry>)* '}'
    void h_dictLiteral_2(ParserData& parserData, ParserBranch& branch) {
    }

    // dictLiteral = '{' ':' _ <items:dictEntry> (',' <items:dictEntry>)* '}'
    void h_dictLiteral_3(ParserData& parserData, ParserBranch& branch) {
    }

    // dictLiteral = '{' ':' <items:dictEntry> _ (',' <items:dictEntry>)* '}'
    void h_dictLiteral_4(ParserData& parserData, ParserBranch& branch) {
    }

    // dictLiteral = '{' ':' <items:dictEntry> (_ ',' <items:dictEntry>)* '}'
    void h_dictLiteral_5(ParserData& parserData, ParserBranch& branch) {
    }

    // dictLiteral = '{' ':' <items:dictEntry> (',' _ <items:dictEntry>)* '}'
    void h_dictLiteral_6(ParserData& parserData, ParserBranch& branch) {
    }

    // dictLiteral = '{' ':' <items:dictEntry> (',' <items:dictEntry>)* _ '}'
    void h_dictLiteral_7(ParserData& parserData, ParserBranch& branch) {
    }

    // dictLiteral = _ '{' ':' <ONL> <items:dictEntry> ',' (<ONL> <items:dictEntry> ',')* <ONL> '}'
    void h_dictLiteral_8(ParserData& parserData, ParserBranch& branch) {
    }

    // dictLiteral = '{' _ ':' <ONL> <items:dictEntry> ',' (<ONL> <items:dictEntry> ',')* <ONL> '}'
    void h_dictLiteral_9(ParserData& parserData, ParserBranch& branch) {
    }

    // dictLiteral = '{' ':' _ <ONL> <items:dictEntry> ',' (<ONL> <items:dictEntry> ',')* <ONL> '}'
    void h_dictLiteral_10(ParserData& parserData, ParserBranch& branch) {
    }

    // dictLiteral = '{' ':' <ONL> _ <items:dictEntry> ',' (<ONL> <items:dictEntry> ',')* <ONL> '}'
    void h_dictLiteral_11(ParserData& parserData, ParserBranch& branch) {
    }

    // dictLiteral = '{' ':' <ONL> <items:dictEntry> _ ',' (<ONL> <items:dictEntry> ',')* <ONL> '}'
    void h_dictLiteral_12(ParserData& parserData, ParserBranch& branch) {
    }

    // dictLiteral = '{' ':' <ONL> <items:dictEntry> ',' _ (<ONL> <items:dictEntry> ',')* <ONL> '}'
    void h_dictLiteral_13(ParserData& parserData, ParserBranch& branch) {
    }

    // dictLiteral = '{' ':' <ONL> <items:dictEntry> ',' (_ <ONL> <items:dictEntry> ',')* <ONL> '}'
    void h_dictLiteral_14(ParserData& parserData, ParserBranch& branch) {
    }

    // dictLiteral = '{' ':' <ONL> <items:dictEntry> ',' (<ONL> _ <items:dictEntry> ',')* <ONL> '}'
    void h_dictLiteral_15(ParserData& parserData, ParserBranch& branch) {
    }

    // dictLiteral = '{' ':' <ONL> <items:dictEntry> ',' (<ONL> <items:dictEntry> _ ',')* <ONL> '}'
    void h_dictLiteral_16(ParserData& parserData, ParserBranch& branch) {
    }

    // dictLiteral = '{' ':' <ONL> <items:dictEntry> ',' (<ONL> <items:dictEntry> ',')* _ <ONL> '}'
    void h_dictLiteral_17(ParserData& parserData, ParserBranch& branch) {
    }

    // dictLiteral = '{' ':' <ONL> <items:dictEntry> ',' (<ONL> <items:dictEntry> ',')* <ONL> _ '}'
    void h_dictLiteral_18(ParserData& parserData, ParserBranch& branch) {
    }

    // dictEntry = _ <key:expression> ':' <ONL> <value:expression>
    void h_dictEntry_1(ParserData& parserData, ParserBranch& branch) {
    }

    // dictEntry = <key:expression> _ ':' <ONL> <value:expression>
    void h_dictEntry_2(ParserData& parserData, ParserBranch& branch) {
    }

    // dictEntry = <key:expression> ':' _ <ONL> <value:expression>
    void h_dictEntry_3(ParserData& parserData, ParserBranch& branch) {
    }

    // dictEntry = <key:expression> ':' <ONL> _ <value:expression>
    void h_dictEntry_4(ParserData& parserData, ParserBranch& branch) {
    }

    // contextLiteral 	= _ '(' <items:memberDecl> (',' <items:memberDecl>)* ')'
    void h_contextLiteral_1(ParserData& parserData, ParserBranch& branch) {
    }

    // contextLiteral 	= '(' _ <items:memberDecl> (',' <items:memberDecl>)* ')'
    void h_contextLiteral_2(ParserData& parserData, ParserBranch& branch) {
    }

    // contextLiteral 	= '(' <items:memberDecl> _ (',' <items:memberDecl>)* ')'
    void h_contextLiteral_3(ParserData& parserData, ParserBranch& branch) {
    }

    // contextLiteral 	= '(' <items:memberDecl> (_ ',' <items:memberDecl>)* ')'
    void h_contextLiteral_4(ParserData& parserData, ParserBranch& branch) {
    }

    // contextLiteral 	= '(' <items:memberDecl> (',' _ <items:memberDecl>)* ')'
    void h_contextLiteral_5(ParserData& parserData, ParserBranch& branch) {
    }

    // contextLiteral 	= '(' <items:memberDecl> (',' <items:memberDecl>)* _ ')'
    void h_contextLiteral_6(ParserData& parserData, ParserBranch& branch) {
    }

    // contextLiteral = _ '(' <ONL> <items:memberDecl> (',' <ONL> <items:memberDecl>)* ',' <ONL> ')'
    void h_contextLiteral_7(ParserData& parserData, ParserBranch& branch) {
    }

    // contextLiteral = '(' _ <ONL> <items:memberDecl> (',' <ONL> <items:memberDecl>)* ',' <ONL> ')'
    void h_contextLiteral_8(ParserData& parserData, ParserBranch& branch) {
    }

    // contextLiteral = '(' <ONL> _ <items:memberDecl> (',' <ONL> <items:memberDecl>)* ',' <ONL> ')'
    void h_contextLiteral_9(ParserData& parserData, ParserBranch& branch) {
    }

    // contextLiteral = '(' <ONL> <items:memberDecl> _ (',' <ONL> <items:memberDecl>)* ',' <ONL> ')'
    void h_contextLiteral_10(ParserData& parserData, ParserBranch& branch) {
    }

    // contextLiteral = '(' <ONL> <items:memberDecl> (_ ',' <ONL> <items:memberDecl>)* ',' <ONL> ')'
    void h_contextLiteral_11(ParserData& parserData, ParserBranch& branch) {
    }

    // contextLiteral = '(' <ONL> <items:memberDecl> (',' _ <ONL> <items:memberDecl>)* ',' <ONL> ')'
    void h_contextLiteral_12(ParserData& parserData, ParserBranch& branch) {
    }

    // contextLiteral = '(' <ONL> <items:memberDecl> (',' <ONL> _ <items:memberDecl>)* ',' <ONL> ')'
    void h_contextLiteral_13(ParserData& parserData, ParserBranch& branch) {
    }

    // contextLiteral = '(' <ONL> <items:memberDecl> (',' <ONL> <items:memberDecl>)* _ ',' <ONL> ')'
    void h_contextLiteral_14(ParserData& parserData, ParserBranch& branch) {
    }

    // contextLiteral = '(' <ONL> <items:memberDecl> (',' <ONL> <items:memberDecl>)* ',' _ <ONL> ')'
    void h_contextLiteral_15(ParserData& parserData, ParserBranch& branch) {
    }

    // contextLiteral = '(' <ONL> <items:memberDecl> (',' <ONL> <items:memberDecl>)* ',' <ONL> _ ')'
    void h_contextLiteral_16(ParserData& parserData, ParserBranch& branch) {
    }

    // memberDecl = _ member:L_IDENTIFIER '=' <value:expression>
    void h_memberDecl_1(ParserData& parserData, ParserBranch& branch) {
    }

    // memberDecl = member:L_IDENTIFIER _ '=' <value:expression>
    void h_memberDecl_2(ParserData& parserData, ParserBranch& branch) {
    }

    // memberDecl = member:L_IDENTIFIER '=' _ <value:expression>
    void h_memberDecl_3(ParserData& parserData, ParserBranch& branch) {
    }

    // statement 	= _ <expression>
    void h_statement_1(ParserData& parserData, ParserBranch& branch) {
    }

    // statement = _ <definition>
    void h_statement_2(ParserData& parserData, ParserBranch& branch) {
    }

    // statement = _ <varDeclaration>
    void h_statement_3(ParserData& parserData, ParserBranch& branch) {
    }

    // statement = _ <assignmentEqual>
    void h_statement_4(ParserData& parserData, ParserBranch& branch) {
    }

    // statement = _ <ifStat>
    void h_statement_5(ParserData& parserData, ParserBranch& branch) {
    }

    // statement = _ <loopStat>
    void h_statement_6(ParserData& parserData, ParserBranch& branch) {
    }

    // statement = _ <jumpStat>
    void h_statement_7(ParserData& parserData, ParserBranch& branch) {
    }

    // statement = _ <withStat>
    void h_statement_8(ParserData& parserData, ParserBranch& branch) {
    }

    // definition 	= _ 'def' <id:identifier> '='? <ONL> <val:expression>
    void h_definition_1(ParserData& parserData, ParserBranch& branch) {
    }

    // definition 	= 'def' _ <id:identifier> '='? <ONL> <val:expression>
    void h_definition_2(ParserData& parserData, ParserBranch& branch) {
    }

    // definition 	= 'def' <id:identifier> _ '='? <ONL> <val:expression>
    void h_definition_3(ParserData& parserData, ParserBranch& branch) {
    }

    // definition 	= 'def' <id:identifier> '='? _ <ONL> <val:expression>
    void h_definition_4(ParserData& parserData, ParserBranch& branch) {
    }

    // definition 	= 'def' <id:identifier> '='? <ONL> _ <val:expression>
    void h_definition_5(ParserData& parserData, ParserBranch& branch) {
    }

    // definition = _ 'def' <id:identifier> ':' '\n' <contextBodyClosedBlock>
    void h_definition_6(ParserData& parserData, ParserBranch& branch) {
    }

    // definition = 'def' _ <id:identifier> ':' '\n' <contextBodyClosedBlock>
    void h_definition_7(ParserData& parserData, ParserBranch& branch) {
    }

    // definition = 'def' <id:identifier> _ ':' '\n' <contextBodyClosedBlock>
    void h_definition_8(ParserData& parserData, ParserBranch& branch) {
    }

    // definition = 'def' <id:identifier> ':' _ '\n' <contextBodyClosedBlock>
    void h_definition_9(ParserData& parserData, ParserBranch& branch) {
    }

    // definition = 'def' <id:identifier> ':' '\n' _ <contextBodyClosedBlock>
    void h_definition_10(ParserData& parserData, ParserBranch& branch) {
    }

    // varDeclaration 	= _ 'var' <body:varRefDeclBody>
    void h_varDeclaration_1(ParserData& parserData, ParserBranch& branch) {
    }

    // varDeclaration 	= 'var' _ <body:varRefDeclBody>
    void h_varDeclaration_2(ParserData& parserData, ParserBranch& branch) {
    }

    // refDeclaration 	= _ 'ref' <body:varRefDeclBody>
    void h_refDeclaration_1(ParserData& parserData, ParserBranch& branch) {
    }

    // refDeclaration 	= 'ref' _ <body:varRefDeclBody>
    void h_refDeclaration_2(ParserData& parserData, ParserBranch& branch) {
    }

    // varRefDeclBody = _ <items:varRefDeclEntry> (',' <ONL> <items:varRefDeclEntry>)*
    void h_varRefDeclBody_1(ParserData& parserData, ParserBranch& branch) {
    }

    // varRefDeclBody = <items:varRefDeclEntry> _ (',' <ONL> <items:varRefDeclEntry>)*
    void h_varRefDeclBody_2(ParserData& parserData, ParserBranch& branch) {
    }

    // varRefDeclBody = <items:varRefDeclEntry> (_ ',' <ONL> <items:varRefDeclEntry>)*
    void h_varRefDeclBody_3(ParserData& parserData, ParserBranch& branch) {
    }

    // varRefDeclBody = <items:varRefDeclEntry> (',' _ <ONL> <items:varRefDeclEntry>)*
    void h_varRefDeclBody_4(ParserData& parserData, ParserBranch& branch) {
    }

    // varRefDeclBody = <items:varRefDeclEntry> (',' <ONL> _ <items:varRefDeclEntry>)*
    void h_varRefDeclBody_5(ParserData& parserData, ParserBranch& branch) {
    }

    // varRefDeclEntry 	= _ <equal:varRefDeclEntryEqual>
    void h_varRefDeclEntry_1(ParserData& parserData, ParserBranch& branch) {
    }

    // varRefDeclEntry = _ <assign:varRefDeclEntryAssign>
    void h_varRefDeclEntry_2(ParserData& parserData, ParserBranch& branch) {
    }

    // varRefDeclEntryEqual = _ <id:identifier> '=' <ONL> <val:expression>
    void h_varRefDeclEntryEqual_1(ParserData& parserData, ParserBranch& branch) {
    }

    // varRefDeclEntryEqual = <id:identifier> _ '=' <ONL> <val:expression>
    void h_varRefDeclEntryEqual_2(ParserData& parserData, ParserBranch& branch) {
    }

    // varRefDeclEntryEqual = <id:identifier> '=' _ <ONL> <val:expression>
    void h_varRefDeclEntryEqual_3(ParserData& parserData, ParserBranch& branch) {
    }

    // varRefDeclEntryEqual = <id:identifier> '=' <ONL> _ <val:expression>
    void h_varRefDeclEntryEqual_4(ParserData& parserData, ParserBranch& branch) {
    }

    // varRefDeclEntryAssign = _ <id:identifier> '->' <ONL> <val:expression>
    void h_varRefDeclEntryAssign_1(ParserData& parserData, ParserBranch& branch) {
    }

    // varRefDeclEntryAssign = <id:identifier> _ '->' <ONL> <val:expression>
    void h_varRefDeclEntryAssign_2(ParserData& parserData, ParserBranch& branch) {
    }

    // varRefDeclEntryAssign = <id:identifier> '->' _ <ONL> <val:expression>
    void h_varRefDeclEntryAssign_3(ParserData& parserData, ParserBranch& branch) {
    }

    // varRefDeclEntryAssign = <id:identifier> '->' <ONL> _ <val:expression>
    void h_varRefDeclEntryAssign_4(ParserData& parserData, ParserBranch& branch) {
    }

    // ifStat 	= _ 'if' <cond:expression> ':' <exec1:statement> [ <elseStat> ]
    void h_ifStat_1(ParserData& parserData, ParserBranch& branch) {
    }

    // ifStat 	= 'if' _ <cond:expression> ':' <exec1:statement> [ <elseStat> ]
    void h_ifStat_2(ParserData& parserData, ParserBranch& branch) {
    }

    // ifStat 	= 'if' <cond:expression> _ ':' <exec1:statement> [ <elseStat> ]
    void h_ifStat_3(ParserData& parserData, ParserBranch& branch) {
    }

    // ifStat 	= 'if' <cond:expression> ':' _ <exec1:statement> [ <elseStat> ]
    void h_ifStat_4(ParserData& parserData, ParserBranch& branch) {
    }

    // ifStat 	= 'if' <cond:expression> ':' <exec1:statement> _ [ <elseStat> ]
    void h_ifStat_5(ParserData& parserData, ParserBranch& branch) {
    }

    // ifStat 	= 'if' <cond:expression> ':' <exec1:statement> [ _ <elseStat> ]
    void h_ifStat_6(ParserData& parserData, ParserBranch& branch) {
    }

    // ifStat = _ 'if' <cond:expression> ':' '\n' <exec1:contextBody> [ <elseStat> ] 'ok'
    void h_ifStat_7(ParserData& parserData, ParserBranch& branch) {
    }

    // ifStat = 'if' _ <cond:expression> ':' '\n' <exec1:contextBody> [ <elseStat> ] 'ok'
    void h_ifStat_8(ParserData& parserData, ParserBranch& branch) {
    }

    // ifStat = 'if' <cond:expression> _ ':' '\n' <exec1:contextBody> [ <elseStat> ] 'ok'
    void h_ifStat_9(ParserData& parserData, ParserBranch& branch) {
    }

    // ifStat = 'if' <cond:expression> ':' _ '\n' <exec1:contextBody> [ <elseStat> ] 'ok'
    void h_ifStat_10(ParserData& parserData, ParserBranch& branch) {
    }

    // ifStat = 'if' <cond:expression> ':' '\n' _ <exec1:contextBody> [ <elseStat> ] 'ok'
    void h_ifStat_11(ParserData& parserData, ParserBranch& branch) {
    }

    // ifStat = 'if' <cond:expression> ':' '\n' <exec1:contextBody> _ [ <elseStat> ] 'ok'
    void h_ifStat_12(ParserData& parserData, ParserBranch& branch) {
    }

    // ifStat = 'if' <cond:expression> ':' '\n' <exec1:contextBody> [ _ <elseStat> ] 'ok'
    void h_ifStat_13(ParserData& parserData, ParserBranch& branch) {
    }

    // ifStat = 'if' <cond:expression> ':' '\n' <exec1:contextBody> [ <elseStat> ] _ 'ok'
    void h_ifStat_14(ParserData& parserData, ParserBranch& branch) {
    }

    // elseStatPart 	= _ 'else' ':' <statement>
    void h_elseStatPart_1(ParserData& parserData, ParserBranch& branch) {
    }

    // elseStatPart 	= 'else' _ ':' <statement>
    void h_elseStatPart_2(ParserData& parserData, ParserBranch& branch) {
    }

    // elseStatPart 	= 'else' ':' _ <statement>
    void h_elseStatPart_3(ParserData& parserData, ParserBranch& branch) {
    }

    // elseStatPart = _ 'else' ':' '\n' <contextBody>
    void h_elseStatPart_4(ParserData& parserData, ParserBranch& branch) {
    }

    // elseStatPart = 'else' _ ':' '\n' <contextBody>
    void h_elseStatPart_5(ParserData& parserData, ParserBranch& branch) {
    }

    // elseStatPart = 'else' ':' _ '\n' <contextBody>
    void h_elseStatPart_6(ParserData& parserData, ParserBranch& branch) {
    }

    // elseStatPart = 'else' ':' '\n' _ <contextBody>
    void h_elseStatPart_7(ParserData& parserData, ParserBranch& branch) {
    }

    // elseStatPart = _ 'elif' <expression> ':' <statement> [ <elseStat> ]
    void h_elseStatPart_8(ParserData& parserData, ParserBranch& branch) {
    }

    // elseStatPart = 'elif' _ <expression> ':' <statement> [ <elseStat> ]
    void h_elseStatPart_9(ParserData& parserData, ParserBranch& branch) {
    }

    // elseStatPart = 'elif' <expression> _ ':' <statement> [ <elseStat> ]
    void h_elseStatPart_10(ParserData& parserData, ParserBranch& branch) {
    }

    // elseStatPart = 'elif' <expression> ':' _ <statement> [ <elseStat> ]
    void h_elseStatPart_11(ParserData& parserData, ParserBranch& branch) {
    }

    // elseStatPart = 'elif' <expression> ':' <statement> _ [ <elseStat> ]
    void h_elseStatPart_12(ParserData& parserData, ParserBranch& branch) {
    }

    // elseStatPart = 'elif' <expression> ':' <statement> [ _ <elseStat> ]
    void h_elseStatPart_13(ParserData& parserData, ParserBranch& branch) {
    }

    // elseStatPart = _ 'elif' <expression> ':' '\n' <contextBody> [ <elseStat> ] 'ok'
    void h_elseStatPart_14(ParserData& parserData, ParserBranch& branch) {
    }

    // elseStatPart = 'elif' _ <expression> ':' '\n' <contextBody> [ <elseStat> ] 'ok'
    void h_elseStatPart_15(ParserData& parserData, ParserBranch& branch) {
    }

    // elseStatPart = 'elif' <expression> _ ':' '\n' <contextBody> [ <elseStat> ] 'ok'
    void h_elseStatPart_16(ParserData& parserData, ParserBranch& branch) {
    }

    // elseStatPart = 'elif' <expression> ':' _ '\n' <contextBody> [ <elseStat> ] 'ok'
    void h_elseStatPart_17(ParserData& parserData, ParserBranch& branch) {
    }

    // elseStatPart = 'elif' <expression> ':' '\n' _ <contextBody> [ <elseStat> ] 'ok'
    void h_elseStatPart_18(ParserData& parserData, ParserBranch& branch) {
    }

    // elseStatPart = 'elif' <expression> ':' '\n' <contextBody> _ [ <elseStat> ] 'ok'
    void h_elseStatPart_19(ParserData& parserData, ParserBranch& branch) {
    }

    // elseStatPart = 'elif' <expression> ':' '\n' <contextBody> [ _ <elseStat> ] 'ok'
    void h_elseStatPart_20(ParserData& parserData, ParserBranch& branch) {
    }

    // elseStatPart = 'elif' <expression> ':' '\n' <contextBody> [ <elseStat> ] _ 'ok'
    void h_elseStatPart_21(ParserData& parserData, ParserBranch& branch) {
    }

    // loopStat = _ 'repeat' <parts:loopStatPart> (';' <parts:loopStatPart>)* ':' <contextBodyClosedBlock>
    void h_loopStat_1(ParserData& parserData, ParserBranch& branch) {
    }

    // loopStat = 'repeat' _ <parts:loopStatPart> (';' <parts:loopStatPart>)* ':' <contextBodyClosedBlock>
    void h_loopStat_2(ParserData& parserData, ParserBranch& branch) {
    }

    // loopStat = 'repeat' <parts:loopStatPart> _ (';' <parts:loopStatPart>)* ':' <contextBodyClosedBlock>
    void h_loopStat_3(ParserData& parserData, ParserBranch& branch) {
    }

    // loopStat = 'repeat' <parts:loopStatPart> (_ ';' <parts:loopStatPart>)* ':' <contextBodyClosedBlock>
    void h_loopStat_4(ParserData& parserData, ParserBranch& branch) {
    }

    // loopStat = 'repeat' <parts:loopStatPart> (';' _ <parts:loopStatPart>)* ':' <contextBodyClosedBlock>
    void h_loopStat_5(ParserData& parserData, ParserBranch& branch) {
    }

    // loopStat = 'repeat' <parts:loopStatPart> (';' <parts:loopStatPart>)* _ ':' <contextBodyClosedBlock>
    void h_loopStat_6(ParserData& parserData, ParserBranch& branch) {
    }

    // loopStat = 'repeat' <parts:loopStatPart> (';' <parts:loopStatPart>)* ':' _ <contextBodyClosedBlock>
    void h_loopStat_7(ParserData& parserData, ParserBranch& branch) {
    }

    // loopStatPart 	= _ <timesLoopStatPart>
    void h_loopStatPart_1(ParserData& parserData, ParserBranch& branch) {
    }

    // loopStatPart = _ <forLoopStatPart>
    void h_loopStatPart_2(ParserData& parserData, ParserBranch& branch) {
    }

    // loopStatPart = _ <whileLoopStatPart>
    void h_loopStatPart_3(ParserData& parserData, ParserBranch& branch) {
    }

    // timesLoopStatPart = _ 'times' <count:expression>
    void h_timesLoopStatPart_1(ParserData& parserData, ParserBranch& branch) {
    }

    // timesLoopStatPart = 'times' _ <count:expression>
    void h_timesLoopStatPart_2(ParserData& parserData, ParserBranch& branch) {
    }

    // forLoopStatPart = _ 'for' <id:identifier> 'in' <iterator:expression>
    void h_forLoopStatPart_1(ParserData& parserData, ParserBranch& branch) {
    }

    // forLoopStatPart = 'for' _ <id:identifier> 'in' <iterator:expression>
    void h_forLoopStatPart_2(ParserData& parserData, ParserBranch& branch) {
    }

    // forLoopStatPart = 'for' <id:identifier> _ 'in' <iterator:expression>
    void h_forLoopStatPart_3(ParserData& parserData, ParserBranch& branch) {
    }

    // forLoopStatPart = 'for' <id:identifier> 'in' _ <iterator:expression>
    void h_forLoopStatPart_4(ParserData& parserData, ParserBranch& branch) {
    }

    // whileLoopStatPart = _ 'while' <cond:expression>
    void h_whileLoopStatPart_1(ParserData& parserData, ParserBranch& branch) {
    }

    // whileLoopStatPart = 'while' _ <cond:expression>
    void h_whileLoopStatPart_2(ParserData& parserData, ParserBranch& branch) {
    }

    // jumpStat 	= _ <breakStat>
    void h_jumpStat_1(ParserData& parserData, ParserBranch& branch) {
    }

    // jumpStat = _ <continueStat>
    void h_jumpStat_2(ParserData& parserData, ParserBranch& branch) {
    }

    // jumpStat = _ <returnStat>
    void h_jumpStat_3(ParserData& parserData, ParserBranch& branch) {
    }

    // breakStat = _ 'break'
    void h_breakStat_1(ParserData& parserData, ParserBranch& branch) {
    }

    // continueStat = _ 'continue'
    void h_continueStat_1(ParserData& parserData, ParserBranch& branch) {
    }

    // returnStat = _ 'return' [ <val:expression> ]
    void h_returnStat_1(ParserData& parserData, ParserBranch& branch) {
    }

    // returnStat = 'return' _ [ <val:expression> ]
    void h_returnStat_2(ParserData& parserData, ParserBranch& branch) {
    }

    // returnStat = 'return' [ _ <val:expression> ]
    void h_returnStat_3(ParserData& parserData, ParserBranch& branch) {
    }

    // withStat = _ 'with' <entries:withStatEntry> [ ',' <entries:withStatEntry> ] ':' <contextBodyClosedBlock>
    void h_withStat_1(ParserData& parserData, ParserBranch& branch) {
    }

    // withStat = 'with' _ <entries:withStatEntry> [ ',' <entries:withStatEntry> ] ':' <contextBodyClosedBlock>
    void h_withStat_2(ParserData& parserData, ParserBranch& branch) {
    }

    // withStat = 'with' <entries:withStatEntry> _ [ ',' <entries:withStatEntry> ] ':' <contextBodyClosedBlock>
    void h_withStat_3(ParserData& parserData, ParserBranch& branch) {
    }

    // withStat = 'with' <entries:withStatEntry> [ _ ',' <entries:withStatEntry> ] ':' <contextBodyClosedBlock>
    void h_withStat_4(ParserData& parserData, ParserBranch& branch) {
    }

    // withStat = 'with' <entries:withStatEntry> [ ',' _ <entries:withStatEntry> ] ':' <contextBodyClosedBlock>
    void h_withStat_5(ParserData& parserData, ParserBranch& branch) {
    }

    // withStat = 'with' <entries:withStatEntry> [ ',' <entries:withStatEntry> ] _ ':' <contextBodyClosedBlock>
    void h_withStat_6(ParserData& parserData, ParserBranch& branch) {
    }

    // withStat = 'with' <entries:withStatEntry> [ ',' <entries:withStatEntry> ] ':' _ <contextBodyClosedBlock>
    void h_withStat_7(ParserData& parserData, ParserBranch& branch) {
    }

    // withStatEntry 	= _ <id:identifier> '=' <val:expression>
    void h_withStatEntry_1(ParserData& parserData, ParserBranch& branch) {
    }

    // withStatEntry 	= <id:identifier> _ '=' <val:expression>
    void h_withStatEntry_2(ParserData& parserData, ParserBranch& branch) {
    }

    // withStatEntry 	= <id:identifier> '=' _ <val:expression>
    void h_withStatEntry_3(ParserData& parserData, ParserBranch& branch) {
    }

    // withStatEntry = _ <val:expression>
    void h_withStatEntry_4(ParserData& parserData, ParserBranch& branch) {
    }

    // assignmentEqual = _ assignRef
    void h_assignmentEqual_1(ParserData& parserData, ParserBranch& branch) {
    }

    // assignmentEqual = _ changeVal
    void h_assignmentEqual_2(ParserData& parserData, ParserBranch& branch) {
    }

    // assignmentEqual = _ addChangeVal
    void h_assignmentEqual_3(ParserData& parserData, ParserBranch& branch) {
    }

    // assignmentEqual = _ subChangeVal
    void h_assignmentEqual_4(ParserData& parserData, ParserBranch& branch) {
    }

    // assignmentEqual = _ mulChangeVal
    void h_assignmentEqual_5(ParserData& parserData, ParserBranch& branch) {
    }

    // assignmentEqual = _ crossChangeVal
    void h_assignmentEqual_6(ParserData& parserData, ParserBranch& branch) {
    }

    // assignmentEqual = _ dotChangeVal
    void h_assignmentEqual_7(ParserData& parserData, ParserBranch& branch) {
    }

    // assignmentEqual = _ divChangeVal
    void h_assignmentEqual_8(ParserData& parserData, ParserBranch& branch) {
    }

    // assignmentEqual = _ intDivChangeVal
    void h_assignmentEqual_9(ParserData& parserData, ParserBranch& branch) {
    }

    // assignmentEqual = _ modChangeVal
    void h_assignmentEqual_10(ParserData& parserData, ParserBranch& branch) {
    }

    // assignmentEqual = _ shiftRChangeVal
    void h_assignmentEqual_11(ParserData& parserData, ParserBranch& branch) {
    }

    // assignmentEqual = _ shiftLChangeVal
    void h_assignmentEqual_12(ParserData& parserData, ParserBranch& branch) {
    }

    // assignmentEqual = _ andChangeVal
    void h_assignmentEqual_13(ParserData& parserData, ParserBranch& branch) {
    }

    // assignmentEqual = _ orChangeVal
    void h_assignmentEqual_14(ParserData& parserData, ParserBranch& branch) {
    }

    // assignmentEqual = _ xorChangeVal
    void h_assignmentEqual_15(ParserData& parserData, ParserBranch& branch) {
    }

    // assignRef = _ <left:expression> ( '->' <ONL> <rights:expression> )+
    void h_assignRef_1(ParserData& parserData, ParserBranch& branch) {
    }

    // assignRef = <left:expression> _ ( '->' <ONL> <rights:expression> )+
    void h_assignRef_2(ParserData& parserData, ParserBranch& branch) {
    }

    // assignRef = <left:expression> ( _ '->' <ONL> <rights:expression> )+
    void h_assignRef_3(ParserData& parserData, ParserBranch& branch) {
    }

    // assignRef = <left:expression> ( '->' _ <ONL> <rights:expression> )+
    void h_assignRef_4(ParserData& parserData, ParserBranch& branch) {
    }

    // assignRef = <left:expression> ( '->' <ONL> _ <rights:expression> )+
    void h_assignRef_5(ParserData& parserData, ParserBranch& branch) {
    }

    // changeVal = _ <left:expression> ( '=' <ONL> <rights:expression> )+
    void h_changeVal_1(ParserData& parserData, ParserBranch& branch) {
    }

    // changeVal = <left:expression> _ ( '=' <ONL> <rights:expression> )+
    void h_changeVal_2(ParserData& parserData, ParserBranch& branch) {
    }

    // changeVal = <left:expression> ( _ '=' <ONL> <rights:expression> )+
    void h_changeVal_3(ParserData& parserData, ParserBranch& branch) {
    }

    // changeVal = <left:expression> ( '=' _ <ONL> <rights:expression> )+
    void h_changeVal_4(ParserData& parserData, ParserBranch& branch) {
    }

    // changeVal = <left:expression> ( '=' <ONL> _ <rights:expression> )+
    void h_changeVal_5(ParserData& parserData, ParserBranch& branch) {
    }

    // addChangeVal = _ <left:expression> ( '+=' <ONL> <rights:expression> )+
    void h_addChangeVal_1(ParserData& parserData, ParserBranch& branch) {
    }

    // addChangeVal = <left:expression> _ ( '+=' <ONL> <rights:expression> )+
    void h_addChangeVal_2(ParserData& parserData, ParserBranch& branch) {
    }

    // addChangeVal = <left:expression> ( _ '+=' <ONL> <rights:expression> )+
    void h_addChangeVal_3(ParserData& parserData, ParserBranch& branch) {
    }

    // addChangeVal = <left:expression> ( '+=' _ <ONL> <rights:expression> )+
    void h_addChangeVal_4(ParserData& parserData, ParserBranch& branch) {
    }

    // addChangeVal = <left:expression> ( '+=' <ONL> _ <rights:expression> )+
    void h_addChangeVal_5(ParserData& parserData, ParserBranch& branch) {
    }

    // subChangeVal = _ <left:expression> ( '-=' <ONL> <rights:expression> )+
    void h_subChangeVal_1(ParserData& parserData, ParserBranch& branch) {
    }

    // subChangeVal = <left:expression> _ ( '-=' <ONL> <rights:expression> )+
    void h_subChangeVal_2(ParserData& parserData, ParserBranch& branch) {
    }

    // subChangeVal = <left:expression> ( _ '-=' <ONL> <rights:expression> )+
    void h_subChangeVal_3(ParserData& parserData, ParserBranch& branch) {
    }

    // subChangeVal = <left:expression> ( '-=' _ <ONL> <rights:expression> )+
    void h_subChangeVal_4(ParserData& parserData, ParserBranch& branch) {
    }

    // subChangeVal = <left:expression> ( '-=' <ONL> _ <rights:expression> )+
    void h_subChangeVal_5(ParserData& parserData, ParserBranch& branch) {
    }

    // mulChangeVal = _ <left:expression> ( '*=' <ONL> <rights:expression> )+
    void h_mulChangeVal_1(ParserData& parserData, ParserBranch& branch) {
    }

    // mulChangeVal = <left:expression> _ ( '*=' <ONL> <rights:expression> )+
    void h_mulChangeVal_2(ParserData& parserData, ParserBranch& branch) {
    }

    // mulChangeVal = <left:expression> ( _ '*=' <ONL> <rights:expression> )+
    void h_mulChangeVal_3(ParserData& parserData, ParserBranch& branch) {
    }

    // mulChangeVal = <left:expression> ( '*=' _ <ONL> <rights:expression> )+
    void h_mulChangeVal_4(ParserData& parserData, ParserBranch& branch) {
    }

    // mulChangeVal = <left:expression> ( '*=' <ONL> _ <rights:expression> )+
    void h_mulChangeVal_5(ParserData& parserData, ParserBranch& branch) {
    }

    // crossChangeVal = _ <left:expression> ( '×=' <ONL> <rights:expression> )+
    void h_crossChangeVal_1(ParserData& parserData, ParserBranch& branch) {
    }

    // crossChangeVal = <left:expression> _ ( '×=' <ONL> <rights:expression> )+
    void h_crossChangeVal_2(ParserData& parserData, ParserBranch& branch) {
    }

    // crossChangeVal = <left:expression> ( _ '×=' <ONL> <rights:expression> )+
    void h_crossChangeVal_3(ParserData& parserData, ParserBranch& branch) {
    }

    // crossChangeVal = <left:expression> ( '×=' _ <ONL> <rights:expression> )+
    void h_crossChangeVal_4(ParserData& parserData, ParserBranch& branch) {
    }

    // crossChangeVal = <left:expression> ( '×=' <ONL> _ <rights:expression> )+
    void h_crossChangeVal_5(ParserData& parserData, ParserBranch& branch) {
    }

    // dotChangeVal = _ <left:expression> ( '⋅=' <ONL> <rights:expression> )+
    void h_dotChangeVal_1(ParserData& parserData, ParserBranch& branch) {
    }

    // dotChangeVal = <left:expression> _ ( '⋅=' <ONL> <rights:expression> )+
    void h_dotChangeVal_2(ParserData& parserData, ParserBranch& branch) {
    }

    // dotChangeVal = <left:expression> ( _ '⋅=' <ONL> <rights:expression> )+
    void h_dotChangeVal_3(ParserData& parserData, ParserBranch& branch) {
    }

    // dotChangeVal = <left:expression> ( '⋅=' _ <ONL> <rights:expression> )+
    void h_dotChangeVal_4(ParserData& parserData, ParserBranch& branch) {
    }

    // dotChangeVal = <left:expression> ( '⋅=' <ONL> _ <rights:expression> )+
    void h_dotChangeVal_5(ParserData& parserData, ParserBranch& branch) {
    }

    // divChangeVal = _ <left:expression> ( '/=' <ONL> <rights:expression> )+
    void h_divChangeVal_1(ParserData& parserData, ParserBranch& branch) {
    }

    // divChangeVal = <left:expression> _ ( '/=' <ONL> <rights:expression> )+
    void h_divChangeVal_2(ParserData& parserData, ParserBranch& branch) {
    }

    // divChangeVal = <left:expression> ( _ '/=' <ONL> <rights:expression> )+
    void h_divChangeVal_3(ParserData& parserData, ParserBranch& branch) {
    }

    // divChangeVal = <left:expression> ( '/=' _ <ONL> <rights:expression> )+
    void h_divChangeVal_4(ParserData& parserData, ParserBranch& branch) {
    }

    // divChangeVal = <left:expression> ( '/=' <ONL> _ <rights:expression> )+
    void h_divChangeVal_5(ParserData& parserData, ParserBranch& branch) {
    }

    // intDivChangeVal = _ <left:expression> ( '/%=' <ONL> <rights:expression> )+
    void h_intDivChangeVal_1(ParserData& parserData, ParserBranch& branch) {
    }

    // intDivChangeVal = <left:expression> _ ( '/%=' <ONL> <rights:expression> )+
    void h_intDivChangeVal_2(ParserData& parserData, ParserBranch& branch) {
    }

    // intDivChangeVal = <left:expression> ( _ '/%=' <ONL> <rights:expression> )+
    void h_intDivChangeVal_3(ParserData& parserData, ParserBranch& branch) {
    }

    // intDivChangeVal = <left:expression> ( '/%=' _ <ONL> <rights:expression> )+
    void h_intDivChangeVal_4(ParserData& parserData, ParserBranch& branch) {
    }

    // intDivChangeVal = <left:expression> ( '/%=' <ONL> _ <rights:expression> )+
    void h_intDivChangeVal_5(ParserData& parserData, ParserBranch& branch) {
    }

    // modChangeVal = _ <left:expression> ( '%=' <ONL> <rights:expression> )+
    void h_modChangeVal_1(ParserData& parserData, ParserBranch& branch) {
    }

    // modChangeVal = <left:expression> _ ( '%=' <ONL> <rights:expression> )+
    void h_modChangeVal_2(ParserData& parserData, ParserBranch& branch) {
    }

    // modChangeVal = <left:expression> ( _ '%=' <ONL> <rights:expression> )+
    void h_modChangeVal_3(ParserData& parserData, ParserBranch& branch) {
    }

    // modChangeVal = <left:expression> ( '%=' _ <ONL> <rights:expression> )+
    void h_modChangeVal_4(ParserData& parserData, ParserBranch& branch) {
    }

    // modChangeVal = <left:expression> ( '%=' <ONL> _ <rights:expression> )+
    void h_modChangeVal_5(ParserData& parserData, ParserBranch& branch) {
    }

    // shiftRChangeVal = _ <left:expression> ( '>>=' <ONL> <rights:expression> )+
    void h_shiftRChangeVal_1(ParserData& parserData, ParserBranch& branch) {
    }

    // shiftRChangeVal = <left:expression> _ ( '>>=' <ONL> <rights:expression> )+
    void h_shiftRChangeVal_2(ParserData& parserData, ParserBranch& branch) {
    }

    // shiftRChangeVal = <left:expression> ( _ '>>=' <ONL> <rights:expression> )+
    void h_shiftRChangeVal_3(ParserData& parserData, ParserBranch& branch) {
    }

    // shiftRChangeVal = <left:expression> ( '>>=' _ <ONL> <rights:expression> )+
    void h_shiftRChangeVal_4(ParserData& parserData, ParserBranch& branch) {
    }

    // shiftRChangeVal = <left:expression> ( '>>=' <ONL> _ <rights:expression> )+
    void h_shiftRChangeVal_5(ParserData& parserData, ParserBranch& branch) {
    }

    // shiftLChangeVal = _ <left:expression> ( '<<=' <ONL> <rights:expression> )+
    void h_shiftLChangeVal_1(ParserData& parserData, ParserBranch& branch) {
    }

    // shiftLChangeVal = <left:expression> _ ( '<<=' <ONL> <rights:expression> )+
    void h_shiftLChangeVal_2(ParserData& parserData, ParserBranch& branch) {
    }

    // shiftLChangeVal = <left:expression> ( _ '<<=' <ONL> <rights:expression> )+
    void h_shiftLChangeVal_3(ParserData& parserData, ParserBranch& branch) {
    }

    // shiftLChangeVal = <left:expression> ( '<<=' _ <ONL> <rights:expression> )+
    void h_shiftLChangeVal_4(ParserData& parserData, ParserBranch& branch) {
    }

    // shiftLChangeVal = <left:expression> ( '<<=' <ONL> _ <rights:expression> )+
    void h_shiftLChangeVal_5(ParserData& parserData, ParserBranch& branch) {
    }

    // andChangeVal = _ <left:expression> ( '&=' <ONL> <rights:expression> )+
    void h_andChangeVal_1(ParserData& parserData, ParserBranch& branch) {
    }

    // andChangeVal = <left:expression> _ ( '&=' <ONL> <rights:expression> )+
    void h_andChangeVal_2(ParserData& parserData, ParserBranch& branch) {
    }

    // andChangeVal = <left:expression> ( _ '&=' <ONL> <rights:expression> )+
    void h_andChangeVal_3(ParserData& parserData, ParserBranch& branch) {
    }

    // andChangeVal = <left:expression> ( '&=' _ <ONL> <rights:expression> )+
    void h_andChangeVal_4(ParserData& parserData, ParserBranch& branch) {
    }

    // andChangeVal = <left:expression> ( '&=' <ONL> _ <rights:expression> )+
    void h_andChangeVal_5(ParserData& parserData, ParserBranch& branch) {
    }

    // orChangeVal = _ <left:expression> ( '|=' <ONL> <rights:expression> )+
    void h_orChangeVal_1(ParserData& parserData, ParserBranch& branch) {
    }

    // orChangeVal = <left:expression> _ ( '|=' <ONL> <rights:expression> )+
    void h_orChangeVal_2(ParserData& parserData, ParserBranch& branch) {
    }

    // orChangeVal = <left:expression> ( _ '|=' <ONL> <rights:expression> )+
    void h_orChangeVal_3(ParserData& parserData, ParserBranch& branch) {
    }

    // orChangeVal = <left:expression> ( '|=' _ <ONL> <rights:expression> )+
    void h_orChangeVal_4(ParserData& parserData, ParserBranch& branch) {
    }

    // orChangeVal = <left:expression> ( '|=' <ONL> _ <rights:expression> )+
    void h_orChangeVal_5(ParserData& parserData, ParserBranch& branch) {
    }

    // xorChangeVal = _ <left:expression> ( '^=' <ONL> <rights:expression> )+
    void h_xorChangeVal_1(ParserData& parserData, ParserBranch& branch) {
    }

    // xorChangeVal = <left:expression> _ ( '^=' <ONL> <rights:expression> )+
    void h_xorChangeVal_2(ParserData& parserData, ParserBranch& branch) {
    }

    // xorChangeVal = <left:expression> ( _ '^=' <ONL> <rights:expression> )+
    void h_xorChangeVal_3(ParserData& parserData, ParserBranch& branch) {
    }

    // xorChangeVal = <left:expression> ( '^=' _ <ONL> <rights:expression> )+
    void h_xorChangeVal_4(ParserData& parserData, ParserBranch& branch) {
    }

    // xorChangeVal = <left:expression> ( '^=' <ONL> _ <rights:expression> )+
    void h_xorChangeVal_5(ParserData& parserData, ParserBranch& branch) {
    }

}
